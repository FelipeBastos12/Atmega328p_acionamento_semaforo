
Semaforo_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000025f8  0000268c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021b  00800140  00800140  000026cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e5  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000999  00000000  00000000  00003925  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df6  00000000  00000000  000042be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  000050b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000736  00000000  00000000  00005438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000784  00000000  00000000  00005b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000062f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_1>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_5>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_14>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e8 ef       	ldi	r30, 0xF8	; 248
     25c:	f5 e2       	ldi	r31, 0x25	; 37
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	a0 34       	cpi	r26, 0x40	; 64
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	a0 e4       	ldi	r26, 0x40	; 64
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	ab 35       	cpi	r26, 0x5B	; 91
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 03 03 	call	0x606	; 0x606 <main>
     27e:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_14>:
void pwm ();
void Usart_trasmit (unsigned char data);
void HCSR04trigger ();

ISR (TIMER0_COMPA_vect) // Timer que faz uma interrupção a cada 1 ms
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	8f 93       	push	r24
     294:	9f 93       	push	r25
     296:	af 93       	push	r26
     298:	bf 93       	push	r27
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
	tempo_ms++;
     2a2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <tempo_ms>
     2a6:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <tempo_ms+0x1>
     2aa:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <tempo_ms+0x2>
     2ae:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <tempo_ms+0x3>
     2b2:	01 96       	adiw	r24, 0x01	; 1
     2b4:	a1 1d       	adc	r26, r1
     2b6:	b1 1d       	adc	r27, r1
     2b8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <tempo_ms>
     2bc:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <tempo_ms+0x1>
     2c0:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <tempo_ms+0x2>
     2c4:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <tempo_ms+0x3>
	tempo_carros++;
     2c8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tempo_carros>
     2cc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tempo_carros+0x1>
     2d0:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tempo_carros+0x2>
     2d4:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tempo_carros+0x3>
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	a1 1d       	adc	r26, r1
     2dc:	b1 1d       	adc	r27, r1
     2de:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_carros>
     2e2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_carros+0x1>
     2e6:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_carros+0x2>
     2ea:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_carros+0x3>
	tempo_ADC++;
     2ee:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <tempo_ADC>
     2f2:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <tempo_ADC+0x1>
     2f6:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <tempo_ADC+0x2>
     2fa:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <tempo_ADC+0x3>
     2fe:	01 96       	adiw	r24, 0x01	; 1
     300:	a1 1d       	adc	r26, r1
     302:	b1 1d       	adc	r27, r1
     304:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <tempo_ADC>
     308:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <tempo_ADC+0x1>
     30c:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <tempo_ADC+0x2>
     310:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <tempo_ADC+0x3>
}
     314:	00 00       	nop
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	bf 91       	pop	r27
     31c:	af 91       	pop	r26
     31e:	9f 91       	pop	r25
     320:	8f 91       	pop	r24
     322:	0f 90       	pop	r0
     324:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <__vector_1>:

ISR (INT0_vect) // Interrupção externa INT0 para o fluxo de veícuos 
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     336:	0f 92       	push	r0
     338:	11 24       	eor	r1, r1
     33a:	2f 93       	push	r18
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
	if (tempo_carros <=1000) // A cada pulso a variável carros é incrementada de 1
     34c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tempo_carros>
     350:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tempo_carros+0x1>
     354:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tempo_carros+0x2>
     358:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tempo_carros+0x3>
     35c:	89 3e       	cpi	r24, 0xE9	; 233
     35e:	93 40       	sbci	r25, 0x03	; 3
     360:	a1 05       	cpc	r26, r1
     362:	b1 05       	cpc	r27, r1
     364:	48 f4       	brcc	.+18     	; 0x378 <__vector_1+0x4a>
	carros++;
     366:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <carros>
     36a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <carros+0x1>
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <carros+0x1>
     374:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <carros>
}
     378:	00 00       	nop
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	2f 91       	pop	r18
     388:	0f 90       	pop	r0
     38a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     38e:	0f 90       	pop	r0
     390:	1f 90       	pop	r1
     392:	18 95       	reti

00000394 <__vector_5>:

ISR (PCINT2_vect) //Interrupção PCINT2 para os botões -, + e s 
{	
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     39c:	0f 92       	push	r0
     39e:	11 24       	eor	r1, r1
     3a0:	2f 93       	push	r18
     3a2:	3f 93       	push	r19
     3a4:	8f 93       	push	r24
     3a6:	9f 93       	push	r25
     3a8:	ef 93       	push	r30
     3aa:	ff 93       	push	r31
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
	if(!(PIND&(1<<5))) // Apenas uma das bordas aciona o código da interrupção
     3b4:	89 e2       	ldi	r24, 0x29	; 41
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	fc 01       	movw	r30, r24
     3ba:	80 81       	ld	r24, Z
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	80 72       	andi	r24, 0x20	; 32
     3c2:	99 27       	eor	r25, r25
     3c4:	89 2b       	or	r24, r25
     3c6:	09 f0       	breq	.+2      	; 0x3ca <__vector_5+0x36>
     3c8:	74 c0       	rjmp	.+232    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
	{
		switch (selecao_parametro) // Tratamento do botão -
     3ca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <selecao_parametro>
     3ce:	88 2f       	mov	r24, r24
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	91 05       	cpc	r25, r1
     3d6:	29 f1       	breq	.+74     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     3d8:	82 30       	cpi	r24, 0x02	; 2
     3da:	91 05       	cpc	r25, r1
     3dc:	1c f4       	brge	.+6      	; 0x3e4 <__vector_5+0x50>
     3de:	89 2b       	or	r24, r25
     3e0:	41 f0       	breq	.+16     	; 0x3f2 <__vector_5+0x5e>
     3e2:	67 c0       	rjmp	.+206    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     3e4:	82 30       	cpi	r24, 0x02	; 2
     3e6:	91 05       	cpc	r25, r1
     3e8:	71 f1       	breq	.+92     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     3ea:	03 97       	sbiw	r24, 0x03	; 3
     3ec:	09 f4       	brne	.+2      	; 0x3f0 <__vector_5+0x5c>
     3ee:	4a c0       	rjmp	.+148    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     3f0:	60 c0       	rjmp	.+192    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
		{
			case Modo: // Os botões de - e + mudam o modo entre manual e atuomático
			if (modo)
     3f2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     3f6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
     3fa:	89 2b       	or	r24, r25
     3fc:	29 f0       	breq	.+10     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			{
				modo = 0;
     3fe:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__data_end+0x1>
     402:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
				break;
     406:	55 c0       	rjmp	.+170    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			}
			else if (!modo)
     408:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     40c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
     410:	89 2b       	or	r24, r25
     412:	39 f4       	brne	.+14     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			{
				modo = 1;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
     41c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
				break;
     420:	48 c0       	rjmp	.+144    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			}
			case Tempo_verde: //Tempo verde
			if(semaforo.tempo_verde_ms>=2000)
     422:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     426:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     42a:	80 3d       	cpi	r24, 0xD0	; 208
     42c:	97 40       	sbci	r25, 0x07	; 7
     42e:	e0 f1       	brcs	.+120    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
			semaforo.tempo_verde_ms -= 1000;
     430:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     434:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     438:	88 5e       	subi	r24, 0xE8	; 232
     43a:	93 40       	sbci	r25, 0x03	; 3
     43c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     440:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
     444:	31 c0       	rjmp	.+98     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
			case Tempo_vermelho: //Tempo vermelho
			if (semaforo.tempo_vermelho_ms>=2000)
     446:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     44a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     44e:	80 3d       	cpi	r24, 0xD0	; 208
     450:	97 40       	sbci	r25, 0x07	; 7
     452:	60 f1       	brcs	.+88     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
			{
			if (semaforo.tempo_vermelho_ms > (semaforo.tempo_amarelo_ms+1000)) // Não permite o tempo vermelho menor que o amarelo
     454:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     458:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     45c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     460:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     464:	88 51       	subi	r24, 0x18	; 24
     466:	9c 4f       	sbci	r25, 0xFC	; 252
     468:	82 17       	cp	r24, r18
     46a:	93 07       	cpc	r25, r19
     46c:	f8 f4       	brcc	.+62     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
			{
				semaforo.tempo_vermelho_ms -= 1000;
     46e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     472:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     476:	88 5e       	subi	r24, 0xE8	; 232
     478:	93 40       	sbci	r25, 0x03	; 3
     47a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     47e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			}
			}
			break;
     482:	14 c0       	rjmp	.+40     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
			case Tempo_amarelo: //Tempo Amarelo
			if (semaforo.tempo_amarelo_ms>=2000)
     484:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     488:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     48c:	80 3d       	cpi	r24, 0xD0	; 208
     48e:	97 40       	sbci	r25, 0x07	; 7
     490:	78 f0       	brcs	.+30     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
			semaforo.tempo_amarelo_ms-=1000;
     492:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     496:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     49a:	88 5e       	subi	r24, 0xE8	; 232
     49c:	93 40       	sbci	r25, 0x03	; 3
     49e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     4a2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
			break;
     4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
				break;
			}
			case Tempo_verde: //Tempo verde
			if(semaforo.tempo_verde_ms>=2000)
			semaforo.tempo_verde_ms -= 1000;
			break;
     4a8:	00 00       	nop
     4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			if (semaforo.tempo_vermelho_ms > (semaforo.tempo_amarelo_ms+1000)) // Não permite o tempo vermelho menor que o amarelo
			{
				semaforo.tempo_vermelho_ms -= 1000;
			}
			}
			break;
     4ac:	00 00       	nop
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			case Tempo_amarelo: //Tempo Amarelo
			if (semaforo.tempo_amarelo_ms>=2000)
			semaforo.tempo_amarelo_ms-=1000;
			break;
     4b0:	00 00       	nop
		}
	}
	if(!(PIND&(1<<4))) // Apenas uma das bordas aciona o código da interrupção
     4b2:	89 e2       	ldi	r24, 0x29	; 41
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	fc 01       	movw	r30, r24
     4b8:	80 81       	ld	r24, Z
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	80 71       	andi	r24, 0x10	; 16
     4c0:	99 27       	eor	r25, r25
     4c2:	89 2b       	or	r24, r25
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4c6:	74 c0       	rjmp	.+232    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
	{
		switch (selecao_parametro) // Tratamento do botão +
     4c8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <selecao_parametro>
     4cc:	88 2f       	mov	r24, r24
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	81 30       	cpi	r24, 0x01	; 1
     4d2:	91 05       	cpc	r25, r1
     4d4:	29 f1       	breq	.+74     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
     4d6:	82 30       	cpi	r24, 0x02	; 2
     4d8:	91 05       	cpc	r25, r1
     4da:	1c f4       	brge	.+6      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
     4dc:	89 2b       	or	r24, r25
     4de:	41 f0       	breq	.+16     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
     4e0:	67 c0       	rjmp	.+206    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
     4e2:	82 30       	cpi	r24, 0x02	; 2
     4e4:	91 05       	cpc	r25, r1
     4e6:	71 f1       	breq	.+92     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
     4e8:	03 97       	sbiw	r24, 0x03	; 3
     4ea:	09 f4       	brne	.+2      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     4ec:	3d c0       	rjmp	.+122    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
     4ee:	60 c0       	rjmp	.+192    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
		{
			case Modo: // Os botões de - e + mudam o modo entre manual e atuomático
			if (modo)
     4f0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     4f4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
     4f8:	89 2b       	or	r24, r25
     4fa:	29 f0       	breq	.+10     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
			{
				modo = 0;
     4fc:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__data_end+0x1>
     500:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
				break;
     504:	55 c0       	rjmp	.+170    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
			}
			else if (!modo)
     506:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     50a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
     50e:	89 2b       	or	r24, r25
     510:	39 f4       	brne	.+14     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
			{
				modo = 1;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
     51a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
				break;
     51e:	48 c0       	rjmp	.+144    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
			}
			case Tempo_verde: //Tempo verde
			if(semaforo.tempo_verde_ms<=8000)
     520:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     524:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     528:	81 34       	cpi	r24, 0x41	; 65
     52a:	9f 41       	sbci	r25, 0x1F	; 31
     52c:	e0 f5       	brcc	.+120    	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
			semaforo.tempo_verde_ms += 1000;
     52e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     532:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     536:	88 51       	subi	r24, 0x18	; 24
     538:	9c 4f       	sbci	r25, 0xFC	; 252
     53a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     53e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
     542:	31 c0       	rjmp	.+98     	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
			case Tempo_vermelho: //Tempo vermelho
			if (semaforo.tempo_vermelho_ms<=8000)
     544:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     548:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     54c:	81 34       	cpi	r24, 0x41	; 65
     54e:	9f 41       	sbci	r25, 0x1F	; 31
     550:	60 f5       	brcc	.+88     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
			semaforo.tempo_vermelho_ms += 1000;
     552:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     556:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     55a:	88 51       	subi	r24, 0x18	; 24
     55c:	9c 4f       	sbci	r25, 0xFC	; 252
     55e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     562:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			break;
     566:	21 c0       	rjmp	.+66     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
			case Tempo_amarelo: //Tempo amarelo
			if (semaforo.tempo_amarelo_ms<=8000)
     568:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     56c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     570:	81 34       	cpi	r24, 0x41	; 65
     572:	9f 41       	sbci	r25, 0x1F	; 31
     574:	e0 f4       	brcc	.+56     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
			{
				if (semaforo.tempo_amarelo_ms<(semaforo.tempo_vermelho_ms-1000)) // Não permite o tempo vermelho menor que o amarelo
     576:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     57a:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     57e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     582:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     586:	88 5e       	subi	r24, 0xE8	; 232
     588:	93 40       	sbci	r25, 0x03	; 3
     58a:	28 17       	cp	r18, r24
     58c:	39 07       	cpc	r19, r25
     58e:	78 f4       	brcc	.+30     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
				{
					semaforo.tempo_amarelo_ms+=1000;
     590:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     594:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     598:	88 51       	subi	r24, 0x18	; 24
     59a:	9c 4f       	sbci	r25, 0xFC	; 252
     59c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     5a0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
				}
			}
			break;
     5a4:	04 c0       	rjmp	.+8      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
				break;
			}
			case Tempo_verde: //Tempo verde
			if(semaforo.tempo_verde_ms<=8000)
			semaforo.tempo_verde_ms += 1000;
			break;
     5a6:	00 00       	nop
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
			case Tempo_vermelho: //Tempo vermelho
			if (semaforo.tempo_vermelho_ms<=8000)
			semaforo.tempo_vermelho_ms += 1000;
			break;
     5aa:	00 00       	nop
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
				if (semaforo.tempo_amarelo_ms<(semaforo.tempo_vermelho_ms-1000)) // Não permite o tempo vermelho menor que o amarelo
				{
					semaforo.tempo_amarelo_ms+=1000;
				}
			}
			break;
     5ae:	00 00       	nop
		}
	}
	if(!(PIND&(1<<6)))
     5b0:	89 e2       	ldi	r24, 0x29	; 41
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	88 2f       	mov	r24, r24
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	80 74       	andi	r24, 0x40	; 64
     5be:	99 27       	eor	r25, r25
     5c0:	89 2b       	or	r24, r25
     5c2:	91 f4       	brne	.+36     	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
	{
		if (selecao_parametro<(Size_enum_parametros-1) && modo==1) // Só é possível selecionar um parâmetro caso o modo esteja 0, que equivale ao modo manual
     5c4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <selecao_parametro>
     5c8:	83 30       	cpi	r24, 0x03	; 3
     5ca:	60 f4       	brcc	.+24     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
     5cc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     5d0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	31 f4       	brne	.+12     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
		{
			selecao_parametro++;
     5d8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <selecao_parametro>
     5dc:	8f 5f       	subi	r24, 0xFF	; 255
     5de:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <selecao_parametro>
		else
		{
			selecao_parametro=Modo;
		}
	}
}
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
		{
			selecao_parametro++;
		}
		else
		{
			selecao_parametro=Modo;
     5e4:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <selecao_parametro>
		}
	}
}
     5e8:	00 00       	nop
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	9f 91       	pop	r25
     5f4:	8f 91       	pop	r24
     5f6:	3f 91       	pop	r19
     5f8:	2f 91       	pop	r18
     5fa:	0f 90       	pop	r0
     5fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <main>:

int main(void)
{
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	00 d0       	rcall	.+0      	; 0x614 <main+0xe>
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
	// Definições de GPIO
	DDRC &= ~(1<<6); // C6 como entrada
     618:	87 e2       	ldi	r24, 0x27	; 39
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	27 e2       	ldi	r18, 0x27	; 39
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	f9 01       	movw	r30, r18
     622:	20 81       	ld	r18, Z
     624:	2f 7b       	andi	r18, 0xBF	; 191
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
	PORTC |= (1<<6); // Pull up ativado
     62a:	88 e2       	ldi	r24, 0x28	; 40
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	28 e2       	ldi	r18, 0x28	; 40
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	f9 01       	movw	r30, r18
     634:	20 81       	ld	r18, Z
     636:	20 64       	ori	r18, 0x40	; 64
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
	DDRC &= ~(1<<0); // C0 e como entrada
     63c:	87 e2       	ldi	r24, 0x27	; 39
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	27 e2       	ldi	r18, 0x27	; 39
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	f9 01       	movw	r30, r18
     646:	20 81       	ld	r18, Z
     648:	2e 7f       	andi	r18, 0xFE	; 254
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18
	PORTC &= ~(1<<0); // Pull up desativado
     64e:	88 e2       	ldi	r24, 0x28	; 40
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	28 e2       	ldi	r18, 0x28	; 40
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	f9 01       	movw	r30, r18
     658:	20 81       	ld	r18, Z
     65a:	2e 7f       	andi	r18, 0xFE	; 254
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
	DDRB = 0b11111111; // Todos os pinos B como saída
     660:	84 e2       	ldi	r24, 0x24	; 36
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	2f ef       	ldi	r18, 0xFF	; 255
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
	DDRD &= ~(1<<2); // D2 como entrada
     66a:	8a e2       	ldi	r24, 0x2A	; 42
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	2a e2       	ldi	r18, 0x2A	; 42
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	f9 01       	movw	r30, r18
     674:	20 81       	ld	r18, Z
     676:	2b 7f       	andi	r18, 0xFB	; 251
     678:	fc 01       	movw	r30, r24
     67a:	20 83       	st	Z, r18
	DDRD |= (1<<0);  //D0 como saída
     67c:	8a e2       	ldi	r24, 0x2A	; 42
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	2a e2       	ldi	r18, 0x2A	; 42
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	f9 01       	movw	r30, r18
     686:	20 81       	ld	r18, Z
     688:	21 60       	ori	r18, 0x01	; 1
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18
	DDRD |= (1<<3); // D3 como saída
     68e:	8a e2       	ldi	r24, 0x2A	; 42
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	2a e2       	ldi	r18, 0x2A	; 42
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	f9 01       	movw	r30, r18
     698:	20 81       	ld	r18, Z
     69a:	28 60       	ori	r18, 0x08	; 8
     69c:	fc 01       	movw	r30, r24
     69e:	20 83       	st	Z, r18
	DDRD &= ~(1<<7); // D7 como entrada
     6a0:	8a e2       	ldi	r24, 0x2A	; 42
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	2a e2       	ldi	r18, 0x2A	; 42
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	2f 77       	andi	r18, 0x7F	; 127
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
 
	for (int h=4;h<=6;h++)
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	9a 83       	std	Y+2, r25	; 0x02
     6b8:	89 83       	std	Y+1, r24	; 0x01
     6ba:	2a c0       	rjmp	.+84     	; 0x710 <main+0x10a>
	{
		DDRD &= ~(1<<h);
     6bc:	8a e2       	ldi	r24, 0x2A	; 42
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	2a e2       	ldi	r18, 0x2A	; 42
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	f9 01       	movw	r30, r18
     6c6:	20 81       	ld	r18, Z
     6c8:	42 2f       	mov	r20, r18
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	09 80       	ldd	r0, Y+1	; 0x01
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <main+0xd0>
     6d2:	22 0f       	add	r18, r18
     6d4:	33 1f       	adc	r19, r19
     6d6:	0a 94       	dec	r0
     6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <main+0xcc>
     6da:	20 95       	com	r18
     6dc:	24 23       	and	r18, r20
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
		PORTD |= (1<<h);
     6e2:	8b e2       	ldi	r24, 0x2B	; 43
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	2b e2       	ldi	r18, 0x2B	; 43
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	f9 01       	movw	r30, r18
     6ec:	20 81       	ld	r18, Z
     6ee:	42 2f       	mov	r20, r18
     6f0:	21 e0       	ldi	r18, 0x01	; 1
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	09 80       	ldd	r0, Y+1	; 0x01
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <main+0xf6>
     6f8:	22 0f       	add	r18, r18
     6fa:	33 1f       	adc	r19, r19
     6fc:	0a 94       	dec	r0
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <main+0xf2>
     700:	24 2b       	or	r18, r20
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
	DDRD &= ~(1<<2); // D2 como entrada
	DDRD |= (1<<0);  //D0 como saída
	DDRD |= (1<<3); // D3 como saída
	DDRD &= ~(1<<7); // D7 como entrada
 
	for (int h=4;h<=6;h++)
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	9a 81       	ldd	r25, Y+2	; 0x02
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	9a 83       	std	Y+2, r25	; 0x02
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	9a 81       	ldd	r25, Y+2	; 0x02
     714:	07 97       	sbiw	r24, 0x07	; 7
     716:	94 f2       	brlt	.-92     	; 0x6bc <main+0xb6>
		DDRD &= ~(1<<h);
		PORTD |= (1<<h);
	} // D4, D5 e D6 como entrada e pull ups ativados
	
	// Configurações das interrupções externas
	EICRA = 0b00001010;
     718:	89 e6       	ldi	r24, 0x69	; 105
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	2a e0       	ldi	r18, 0x0A	; 10
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
	EIMSK = 0b00000011;
     722:	8d e3       	ldi	r24, 0x3D	; 61
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	23 e0       	ldi	r18, 0x03	; 3
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
	PCICR = 0b00000100;
     72c:	88 e6       	ldi	r24, 0x68	; 104
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	24 e0       	ldi	r18, 0x04	; 4
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
	PCMSK2= 0b01110000;
     736:	8d e6       	ldi	r24, 0x6D	; 109
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	20 e7       	ldi	r18, 0x70	; 112
     73c:	fc 01       	movw	r30, r24
     73e:	20 83       	st	Z, r18
	sei();
     740:	78 94       	sei
	
	// Definições do timer, que irá fazer interrupções a cada 1 ms
	TCCR0A = 0b00000010;
     742:	84 e4       	ldi	r24, 0x44	; 68
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	22 e0       	ldi	r18, 0x02	; 2
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
	TCCR0B = 0b00000011;
     74c:	85 e4       	ldi	r24, 0x45	; 69
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	23 e0       	ldi	r18, 0x03	; 3
     752:	fc 01       	movw	r30, r24
     754:	20 83       	st	Z, r18
	OCR0A = 249;
     756:	87 e4       	ldi	r24, 0x47	; 71
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	29 ef       	ldi	r18, 0xF9	; 249
     75c:	fc 01       	movw	r30, r24
     75e:	20 83       	st	Z, r18
	TIMSK0 = 0b00000010;
     760:	8e e6       	ldi	r24, 0x6E	; 110
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	22 e0       	ldi	r18, 0x02	; 2
     766:	fc 01       	movw	r30, r24
     768:	20 83       	st	Z, r18
	
	// Definições do ADC
	ADMUX = 0b01000000;
     76a:	8c e7       	ldi	r24, 0x7C	; 124
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	20 e4       	ldi	r18, 0x40	; 64
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
	ADCSRA = 0b11100111;
     774:	8a e7       	ldi	r24, 0x7A	; 122
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	27 ee       	ldi	r18, 0xE7	; 231
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
	ADCSRB = 0b00000000;
     77e:	8b e7       	ldi	r24, 0x7B	; 123
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	fc 01       	movw	r30, r24
     784:	10 82       	st	Z, r1
	DIDR0 = 0b00000001;
     786:	8e e7       	ldi	r24, 0x7E	; 126
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18
	
	// Definições do PWM
	TCCR2A = 0b00100011;
     790:	80 eb       	ldi	r24, 0xB0	; 176
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	23 e2       	ldi	r18, 0x23	; 35
     796:	fc 01       	movw	r30, r24
     798:	20 83       	st	Z, r18
	TCCR2B = 0b00000110;
     79a:	81 eb       	ldi	r24, 0xB1	; 177
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	26 e0       	ldi	r18, 0x06	; 6
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
	OCR2B = 128;
     7a4:	84 eb       	ldi	r24, 0xB4	; 180
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	20 e8       	ldi	r18, 0x80	; 128
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
	
	//Configurações do USART
	UBRR0H = (unsigned char)(MYUBRR>>8);
     7ae:	85 ec       	ldi	r24, 0xC5	; 197
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	fc 01       	movw	r30, r24
     7b4:	10 82       	st	Z, r1
	UBRR0L = (unsigned char)MYUBRR;
     7b6:	84 ec       	ldi	r24, 0xC4	; 196
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	2f ef       	ldi	r18, 0xFF	; 255
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     7c0:	81 ec       	ldi	r24, 0xC1	; 193
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	28 e9       	ldi	r18, 0x98	; 152
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
	UCSR0C = (3<<UCSZ00);
     7ca:	82 ec       	ldi	r24, 0xC2	; 194
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	26 e0       	ldi	r18, 0x06	; 6
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
	
	// Inicialização do LCD
	nokia_lcd_init();
     7d4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <nokia_lcd_init>
	anima_LCD(semaforo.tempo_verde_ms,semaforo.tempo_vermelho_ms, semaforo.tempo_amarelo_ms);
     7d8:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     7dc:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     7e0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     7e4:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     7e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7ec:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     7f0:	b9 01       	movw	r22, r18
     7f2:	0e 94 07 09 	call	0x120e	; 0x120e <anima_LCD>
	
	while (1)
	{
		estima_carros(); // Função para estimar o fluxo de carros
     7f6:	0e 94 1c 08 	call	0x1038	; 0x1038 <estima_carros>
		pwm(); // Função para manipular o pwm
     7fa:	0e 94 c6 07 	call	0xf8c	; 0xf8c <pwm>
		anima_semaforo(semaforo, tempo_ms); // Função para animar o semáforo
     7fe:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <tempo_ms>
     802:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <tempo_ms+0x1>
     806:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <tempo_ms+0x2>
     80a:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <tempo_ms+0x3>
     80e:	7c 01       	movw	r14, r24
     810:	8d 01       	movw	r16, r26
     812:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     816:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     81a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     81e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     822:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     826:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     82a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     82e:	0e 94 1a 04 	call	0x834	; 0x834 <anima_semaforo>
	}
     832:	e1 cf       	rjmp	.-62     	; 0x7f6 <main+0x1f0>

00000834 <anima_semaforo>:
}

void anima_semaforo(stc_semaforo Semaforo, uint32_t Tempo_ms )
{	
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	6d 97       	sbiw	r28, 0x1d	; 29
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	2b 8b       	std	Y+19, r18	; 0x13
     852:	3c 8b       	std	Y+20, r19	; 0x14
     854:	4d 8b       	std	Y+21, r20	; 0x15
     856:	5e 8b       	std	Y+22, r21	; 0x16
     858:	6f 8b       	std	Y+23, r22	; 0x17
     85a:	78 8f       	std	Y+24, r23	; 0x18
     85c:	89 8f       	std	Y+25, r24	; 0x19
     85e:	ea 8e       	std	Y+26, r14	; 0x1a
     860:	fb 8e       	std	Y+27, r15	; 0x1b
     862:	0c 8f       	std	Y+28, r16	; 0x1c
     864:	1d 8f       	std	Y+29, r17	; 0x1d
	const uint16_t estados [9] = {0b00010010, 0b00000010, 0b00011100, 0b00001100, 0b00000100, 0b00011000, 0b00001000, 0b00110000, 0b00010100};
     866:	22 e1       	ldi	r18, 0x12	; 18
     868:	e7 e0       	ldi	r30, 0x07	; 7
     86a:	f1 e0       	ldi	r31, 0x01	; 1
     86c:	ce 01       	movw	r24, r28
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	dc 01       	movw	r26, r24
     872:	01 90       	ld	r0, Z+
     874:	0d 92       	st	X+, r0
     876:	2a 95       	dec	r18
     878:	e1 f7       	brne	.-8      	; 0x872 <anima_semaforo+0x3e>
	static int8_t I_M = 0, I_E = 0;
	static uint32_t tempo_anterior_ms_M = 0 , tempo_anterior_ms_E = 0;
	
	PORTB = estados [I_M] & 0b11111111;
     87a:	85 e2       	ldi	r24, 0x25	; 37
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <I_M.2182>
     882:	02 2e       	mov	r0, r18
     884:	00 0c       	add	r0, r0
     886:	33 0b       	sbc	r19, r19
     888:	22 0f       	add	r18, r18
     88a:	33 1f       	adc	r19, r19
     88c:	ae 01       	movw	r20, r28
     88e:	4f 5f       	subi	r20, 0xFF	; 255
     890:	5f 4f       	sbci	r21, 0xFF	; 255
     892:	24 0f       	add	r18, r20
     894:	35 1f       	adc	r19, r21
     896:	f9 01       	movw	r30, r18
     898:	20 81       	ld	r18, Z
     89a:	31 81       	ldd	r19, Z+1	; 0x01
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
	
	if(I_M<=3) // Os 4 primeiros estados ligam os leds verdes
     8a0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <I_M.2182>
     8a4:	84 30       	cpi	r24, 0x04	; 4
     8a6:	0c f0       	brlt	.+2      	; 0x8aa <anima_semaforo+0x76>
     8a8:	4b c0       	rjmp	.+150    	; 0x940 <__stack+0x41>
	{ 
		PORTB &= ~(1<<0); // Semáforo para pedestres vermelho
     8aa:	85 e2       	ldi	r24, 0x25	; 37
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	25 e2       	ldi	r18, 0x25	; 37
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	f9 01       	movw	r30, r18
     8b4:	20 81       	ld	r18, Z
     8b6:	2e 7f       	andi	r18, 0xFE	; 254
     8b8:	fc 01       	movw	r30, r24
     8ba:	20 83       	st	Z, r18
		if ((Tempo_ms-tempo_anterior_ms_M)>=(Semaforo.tempo_verde_ms/4))
     8bc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <tempo_anterior_ms_M.2184>
     8c0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <tempo_anterior_ms_M.2184+0x1>
     8c4:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <tempo_anterior_ms_M.2184+0x2>
     8c8:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <tempo_anterior_ms_M.2184+0x3>
     8cc:	2a 8d       	ldd	r18, Y+26	; 0x1a
     8ce:	3b 8d       	ldd	r19, Y+27	; 0x1b
     8d0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     8d2:	5d 8d       	ldd	r21, Y+29	; 0x1d
     8d4:	28 1b       	sub	r18, r24
     8d6:	39 0b       	sbc	r19, r25
     8d8:	4a 0b       	sbc	r20, r26
     8da:	5b 0b       	sbc	r21, r27
     8dc:	8c 89       	ldd	r24, Y+20	; 0x14
     8de:	9d 89       	ldd	r25, Y+21	; 0x15
     8e0:	96 95       	lsr	r25
     8e2:	87 95       	ror	r24
     8e4:	96 95       	lsr	r25
     8e6:	87 95       	ror	r24
     8e8:	cc 01       	movw	r24, r24
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	28 17       	cp	r18, r24
     8f0:	39 07       	cpc	r19, r25
     8f2:	4a 07       	cpc	r20, r26
     8f4:	5b 07       	cpc	r21, r27
     8f6:	08 f4       	brcc	.+2      	; 0x8fa <anima_semaforo+0xc6>
     8f8:	cc c0       	rjmp	.+408    	; 0xa92 <__stack+0x193>
		{
			I_M++;
     8fa:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <I_M.2182>
     8fe:	8f 5f       	subi	r24, 0xFF	; 255
     900:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <I_M.2182>
			tempo_anterior_ms_M+=(Semaforo.tempo_verde_ms/4);
     904:	8c 89       	ldd	r24, Y+20	; 0x14
     906:	9d 89       	ldd	r25, Y+21	; 0x15
     908:	96 95       	lsr	r25
     90a:	87 95       	ror	r24
     90c:	96 95       	lsr	r25
     90e:	87 95       	ror	r24
     910:	9c 01       	movw	r18, r24
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <tempo_anterior_ms_M.2184>
     91a:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <tempo_anterior_ms_M.2184+0x1>
     91e:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <tempo_anterior_ms_M.2184+0x2>
     922:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <tempo_anterior_ms_M.2184+0x3>
     926:	82 0f       	add	r24, r18
     928:	93 1f       	adc	r25, r19
     92a:	a4 1f       	adc	r26, r20
     92c:	b5 1f       	adc	r27, r21
     92e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <tempo_anterior_ms_M.2184>
     932:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <tempo_anterior_ms_M.2184+0x1>
     936:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <tempo_anterior_ms_M.2184+0x2>
     93a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <tempo_anterior_ms_M.2184+0x3>
     93e:	a9 c0       	rjmp	.+338    	; 0xa92 <__stack+0x193>
		}
	}
	else
	{
		if(I_M<=4) // Os 5 primeiros estados liga o led amarelo
     940:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <I_M.2182>
     944:	85 30       	cpi	r24, 0x05	; 5
     946:	d4 f5       	brge	.+116    	; 0x9bc <__stack+0xbd>
		{
			if ((Tempo_ms-tempo_anterior_ms_M)>=(Semaforo.tempo_amarelo_ms))
     948:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <tempo_anterior_ms_M.2184>
     94c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <tempo_anterior_ms_M.2184+0x1>
     950:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <tempo_anterior_ms_M.2184+0x2>
     954:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <tempo_anterior_ms_M.2184+0x3>
     958:	2a 8d       	ldd	r18, Y+26	; 0x1a
     95a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     95c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     95e:	5d 8d       	ldd	r21, Y+29	; 0x1d
     960:	28 1b       	sub	r18, r24
     962:	39 0b       	sbc	r19, r25
     964:	4a 0b       	sbc	r20, r26
     966:	5b 0b       	sbc	r21, r27
     968:	88 8d       	ldd	r24, Y+24	; 0x18
     96a:	99 8d       	ldd	r25, Y+25	; 0x19
     96c:	cc 01       	movw	r24, r24
     96e:	a0 e0       	ldi	r26, 0x00	; 0
     970:	b0 e0       	ldi	r27, 0x00	; 0
     972:	28 17       	cp	r18, r24
     974:	39 07       	cpc	r19, r25
     976:	4a 07       	cpc	r20, r26
     978:	5b 07       	cpc	r21, r27
     97a:	08 f4       	brcc	.+2      	; 0x97e <__stack+0x7f>
     97c:	8a c0       	rjmp	.+276    	; 0xa92 <__stack+0x193>
			{
				I_M++;
     97e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <I_M.2182>
     982:	8f 5f       	subi	r24, 0xFF	; 255
     984:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <I_M.2182>
				tempo_anterior_ms_M+=(Semaforo.tempo_amarelo_ms);
     988:	88 8d       	ldd	r24, Y+24	; 0x18
     98a:	99 8d       	ldd	r25, Y+25	; 0x19
     98c:	9c 01       	movw	r18, r24
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <tempo_anterior_ms_M.2184>
     996:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <tempo_anterior_ms_M.2184+0x1>
     99a:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <tempo_anterior_ms_M.2184+0x2>
     99e:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <tempo_anterior_ms_M.2184+0x3>
     9a2:	82 0f       	add	r24, r18
     9a4:	93 1f       	adc	r25, r19
     9a6:	a4 1f       	adc	r26, r20
     9a8:	b5 1f       	adc	r27, r21
     9aa:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <tempo_anterior_ms_M.2184>
     9ae:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <tempo_anterior_ms_M.2184+0x1>
     9b2:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <tempo_anterior_ms_M.2184+0x2>
     9b6:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <tempo_anterior_ms_M.2184+0x3>
     9ba:	6b c0       	rjmp	.+214    	; 0xa92 <__stack+0x193>
			}
		}
		else
		{
			if(I_M<=8) // Os últimos 4 estados ligam os leds vermelhos
     9bc:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <I_M.2182>
     9c0:	89 30       	cpi	r24, 0x09	; 9
     9c2:	0c f0       	brlt	.+2      	; 0x9c6 <__stack+0xc7>
     9c4:	4c c0       	rjmp	.+152    	; 0xa5e <__stack+0x15f>
			{
					PORTB |= (1<<0); // Semáforo para pedestres verde
     9c6:	85 e2       	ldi	r24, 0x25	; 37
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	25 e2       	ldi	r18, 0x25	; 37
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	f9 01       	movw	r30, r18
     9d0:	20 81       	ld	r18, Z
     9d2:	21 60       	ori	r18, 0x01	; 1
     9d4:	fc 01       	movw	r30, r24
     9d6:	20 83       	st	Z, r18
					HCSR04trigger(); // Função para verificar se algum veículo avançou o semáforo vermelho
     9d8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <HCSR04trigger>
				if((Tempo_ms-tempo_anterior_ms_M)>=(Semaforo.tempo_vermelho_ms/4))
     9dc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <tempo_anterior_ms_M.2184>
     9e0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <tempo_anterior_ms_M.2184+0x1>
     9e4:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <tempo_anterior_ms_M.2184+0x2>
     9e8:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <tempo_anterior_ms_M.2184+0x3>
     9ec:	2a 8d       	ldd	r18, Y+26	; 0x1a
     9ee:	3b 8d       	ldd	r19, Y+27	; 0x1b
     9f0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     9f2:	5d 8d       	ldd	r21, Y+29	; 0x1d
     9f4:	28 1b       	sub	r18, r24
     9f6:	39 0b       	sbc	r19, r25
     9f8:	4a 0b       	sbc	r20, r26
     9fa:	5b 0b       	sbc	r21, r27
     9fc:	8e 89       	ldd	r24, Y+22	; 0x16
     9fe:	9f 89       	ldd	r25, Y+23	; 0x17
     a00:	96 95       	lsr	r25
     a02:	87 95       	ror	r24
     a04:	96 95       	lsr	r25
     a06:	87 95       	ror	r24
     a08:	cc 01       	movw	r24, r24
     a0a:	a0 e0       	ldi	r26, 0x00	; 0
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	28 17       	cp	r18, r24
     a10:	39 07       	cpc	r19, r25
     a12:	4a 07       	cpc	r20, r26
     a14:	5b 07       	cpc	r21, r27
     a16:	e8 f1       	brcs	.+122    	; 0xa92 <__stack+0x193>
				{
					I_M++;
     a18:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <I_M.2182>
     a1c:	8f 5f       	subi	r24, 0xFF	; 255
     a1e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <I_M.2182>
					tempo_anterior_ms_M+=(Semaforo.tempo_vermelho_ms/4);
     a22:	8e 89       	ldd	r24, Y+22	; 0x16
     a24:	9f 89       	ldd	r25, Y+23	; 0x17
     a26:	96 95       	lsr	r25
     a28:	87 95       	ror	r24
     a2a:	96 95       	lsr	r25
     a2c:	87 95       	ror	r24
     a2e:	9c 01       	movw	r18, r24
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <tempo_anterior_ms_M.2184>
     a38:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <tempo_anterior_ms_M.2184+0x1>
     a3c:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <tempo_anterior_ms_M.2184+0x2>
     a40:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <tempo_anterior_ms_M.2184+0x3>
     a44:	82 0f       	add	r24, r18
     a46:	93 1f       	adc	r25, r19
     a48:	a4 1f       	adc	r26, r20
     a4a:	b5 1f       	adc	r27, r21
     a4c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <tempo_anterior_ms_M.2184>
     a50:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <tempo_anterior_ms_M.2184+0x1>
     a54:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <tempo_anterior_ms_M.2184+0x2>
     a58:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <tempo_anterior_ms_M.2184+0x3>
     a5c:	1a c0       	rjmp	.+52     	; 0xa92 <__stack+0x193>
				}
			}
			else
			{
				I_M=0; // Inicia o ciclo de novo
     a5e:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <I_M.2182>
				tempo_anterior_ms_M = Tempo_ms;
     a62:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a64:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a66:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a68:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a6a:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <tempo_anterior_ms_M.2184>
     a6e:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <tempo_anterior_ms_M.2184+0x1>
     a72:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <tempo_anterior_ms_M.2184+0x2>
     a76:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <tempo_anterior_ms_M.2184+0x3>
				tempo_anterior_ms_E = Tempo_ms; // Tempos igualados para sincronizar o semáforo mestre e escravo
     a7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a7e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a80:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a82:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <tempo_anterior_ms_E.2185>
     a86:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <tempo_anterior_ms_E.2185+0x1>
     a8a:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <tempo_anterior_ms_E.2185+0x2>
     a8e:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <tempo_anterior_ms_E.2185+0x3>
			}
		}
	}
	if (I_E<=3) // Estados referentes ao semáforo escravo 
     a92:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <I_E.2183>
     a96:	84 30       	cpi	r24, 0x04	; 4
     a98:	0c f0       	brlt	.+2      	; 0xa9c <__stack+0x19d>
     a9a:	4f c0       	rjmp	.+158    	; 0xb3a <__stack+0x23b>
	{
		if ((Tempo_ms-tempo_anterior_ms_E)>=(Semaforo.tempo_verde_ms+Semaforo.tempo_amarelo_ms)/4)
     a9c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <tempo_anterior_ms_E.2185>
     aa0:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <tempo_anterior_ms_E.2185+0x1>
     aa4:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <tempo_anterior_ms_E.2185+0x2>
     aa8:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <tempo_anterior_ms_E.2185+0x3>
     aac:	2a 8d       	ldd	r18, Y+26	; 0x1a
     aae:	3b 8d       	ldd	r19, Y+27	; 0x1b
     ab0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     ab2:	5d 8d       	ldd	r21, Y+29	; 0x1d
     ab4:	28 1b       	sub	r18, r24
     ab6:	39 0b       	sbc	r19, r25
     ab8:	4a 0b       	sbc	r20, r26
     aba:	5b 0b       	sbc	r21, r27
     abc:	6c 89       	ldd	r22, Y+20	; 0x14
     abe:	7d 89       	ldd	r23, Y+21	; 0x15
     ac0:	88 8d       	ldd	r24, Y+24	; 0x18
     ac2:	99 8d       	ldd	r25, Y+25	; 0x19
     ac4:	86 0f       	add	r24, r22
     ac6:	97 1f       	adc	r25, r23
     ac8:	96 95       	lsr	r25
     aca:	87 95       	ror	r24
     acc:	96 95       	lsr	r25
     ace:	87 95       	ror	r24
     ad0:	cc 01       	movw	r24, r24
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	28 17       	cp	r18, r24
     ad8:	39 07       	cpc	r19, r25
     ada:	4a 07       	cpc	r20, r26
     adc:	5b 07       	cpc	r21, r27
     ade:	08 f4       	brcc	.+2      	; 0xae2 <__stack+0x1e3>
     ae0:	ce c0       	rjmp	.+412    	; 0xc7e <__stack+0x37f>
		{
			I_E++;
     ae2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <I_E.2183>
     ae6:	8f 5f       	subi	r24, 0xFF	; 255
     ae8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <I_E.2183>
			tempo_anterior_ms_E += ((Semaforo.tempo_verde_ms+Semaforo.tempo_amarelo_ms)/4);
     aec:	2c 89       	ldd	r18, Y+20	; 0x14
     aee:	3d 89       	ldd	r19, Y+21	; 0x15
     af0:	88 8d       	ldd	r24, Y+24	; 0x18
     af2:	99 8d       	ldd	r25, Y+25	; 0x19
     af4:	82 0f       	add	r24, r18
     af6:	93 1f       	adc	r25, r19
     af8:	96 95       	lsr	r25
     afa:	87 95       	ror	r24
     afc:	96 95       	lsr	r25
     afe:	87 95       	ror	r24
     b00:	9c 01       	movw	r18, r24
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <tempo_anterior_ms_E.2185>
     b0a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <tempo_anterior_ms_E.2185+0x1>
     b0e:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <tempo_anterior_ms_E.2185+0x2>
     b12:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <tempo_anterior_ms_E.2185+0x3>
     b16:	82 0f       	add	r24, r18
     b18:	93 1f       	adc	r25, r19
     b1a:	a4 1f       	adc	r26, r20
     b1c:	b5 1f       	adc	r27, r21
     b1e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <tempo_anterior_ms_E.2185>
     b22:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <tempo_anterior_ms_E.2185+0x1>
     b26:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <tempo_anterior_ms_E.2185+0x2>
     b2a:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <tempo_anterior_ms_E.2185+0x3>
			Usart_trasmit('0'+I_E); // Função para enviar os dados pela porta COM
     b2e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <I_E.2183>
     b32:	80 5d       	subi	r24, 0xD0	; 208
     b34:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Usart_trasmit>
				I_E=0; // inicia o ciclo de novo no semáforo escravo
				Usart_trasmit('0'+I_E); // Envia os dados para o semáforo escravo iniciar o ciclo de novo
			}
		}
	}
}
     b38:	a2 c0       	rjmp	.+324    	; 0xc7e <__stack+0x37f>
			Usart_trasmit('0'+I_E); // Função para enviar os dados pela porta COM
		}
	}
	else
	{
		if (I_E<=7) // Estados referentes ao semáforo escravo 
     b3a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <I_E.2183>
     b3e:	88 30       	cpi	r24, 0x08	; 8
     b40:	0c f0       	brlt	.+2      	; 0xb44 <__stack+0x245>
     b42:	53 c0       	rjmp	.+166    	; 0xbea <__stack+0x2eb>
		{
			if ((Tempo_ms-tempo_anterior_ms_E)>=(Semaforo.tempo_vermelho_ms-Semaforo.tempo_amarelo_ms)/4)
     b44:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <tempo_anterior_ms_E.2185>
     b48:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <tempo_anterior_ms_E.2185+0x1>
     b4c:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <tempo_anterior_ms_E.2185+0x2>
     b50:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <tempo_anterior_ms_E.2185+0x3>
     b54:	2a 8d       	ldd	r18, Y+26	; 0x1a
     b56:	3b 8d       	ldd	r19, Y+27	; 0x1b
     b58:	4c 8d       	ldd	r20, Y+28	; 0x1c
     b5a:	5d 8d       	ldd	r21, Y+29	; 0x1d
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	6e 89       	ldd	r22, Y+22	; 0x16
     b66:	7f 89       	ldd	r23, Y+23	; 0x17
     b68:	88 8d       	ldd	r24, Y+24	; 0x18
     b6a:	99 8d       	ldd	r25, Y+25	; 0x19
     b6c:	fb 01       	movw	r30, r22
     b6e:	e8 1b       	sub	r30, r24
     b70:	f9 0b       	sbc	r31, r25
     b72:	cf 01       	movw	r24, r30
     b74:	96 95       	lsr	r25
     b76:	87 95       	ror	r24
     b78:	96 95       	lsr	r25
     b7a:	87 95       	ror	r24
     b7c:	cc 01       	movw	r24, r24
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	28 17       	cp	r18, r24
     b84:	39 07       	cpc	r19, r25
     b86:	4a 07       	cpc	r20, r26
     b88:	5b 07       	cpc	r21, r27
     b8a:	08 f4       	brcc	.+2      	; 0xb8e <__stack+0x28f>
     b8c:	78 c0       	rjmp	.+240    	; 0xc7e <__stack+0x37f>
			{
				I_E++;
     b8e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <I_E.2183>
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <I_E.2183>
				tempo_anterior_ms_E+=((Semaforo.tempo_vermelho_ms-Semaforo.tempo_amarelo_ms)/4);
     b98:	2e 89       	ldd	r18, Y+22	; 0x16
     b9a:	3f 89       	ldd	r19, Y+23	; 0x17
     b9c:	88 8d       	ldd	r24, Y+24	; 0x18
     b9e:	99 8d       	ldd	r25, Y+25	; 0x19
     ba0:	a9 01       	movw	r20, r18
     ba2:	48 1b       	sub	r20, r24
     ba4:	59 0b       	sbc	r21, r25
     ba6:	ca 01       	movw	r24, r20
     ba8:	96 95       	lsr	r25
     baa:	87 95       	ror	r24
     bac:	96 95       	lsr	r25
     bae:	87 95       	ror	r24
     bb0:	9c 01       	movw	r18, r24
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <tempo_anterior_ms_E.2185>
     bba:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <tempo_anterior_ms_E.2185+0x1>
     bbe:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <tempo_anterior_ms_E.2185+0x2>
     bc2:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <tempo_anterior_ms_E.2185+0x3>
     bc6:	82 0f       	add	r24, r18
     bc8:	93 1f       	adc	r25, r19
     bca:	a4 1f       	adc	r26, r20
     bcc:	b5 1f       	adc	r27, r21
     bce:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <tempo_anterior_ms_E.2185>
     bd2:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <tempo_anterior_ms_E.2185+0x1>
     bd6:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <tempo_anterior_ms_E.2185+0x2>
     bda:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <tempo_anterior_ms_E.2185+0x3>
				Usart_trasmit('0'+I_E); // Função para enviar os dados pela porta COM
     bde:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <I_E.2183>
     be2:	80 5d       	subi	r24, 0xD0	; 208
     be4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Usart_trasmit>
				I_E=0; // inicia o ciclo de novo no semáforo escravo
				Usart_trasmit('0'+I_E); // Envia os dados para o semáforo escravo iniciar o ciclo de novo
			}
		}
	}
}
     be8:	4a c0       	rjmp	.+148    	; 0xc7e <__stack+0x37f>
				Usart_trasmit('0'+I_E); // Função para enviar os dados pela porta COM
			}
		}
		else
		{
			if (I_E<=8) // Estados referentes ao semáforo escravo  
     bea:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <I_E.2183>
     bee:	89 30       	cpi	r24, 0x09	; 9
     bf0:	0c f0       	brlt	.+2      	; 0xbf4 <__stack+0x2f5>
     bf2:	3e c0       	rjmp	.+124    	; 0xc70 <__stack+0x371>
			{
				if ((Tempo_ms - tempo_anterior_ms_E)>=(Semaforo.tempo_amarelo_ms))
     bf4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <tempo_anterior_ms_E.2185>
     bf8:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <tempo_anterior_ms_E.2185+0x1>
     bfc:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <tempo_anterior_ms_E.2185+0x2>
     c00:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <tempo_anterior_ms_E.2185+0x3>
     c04:	2a 8d       	ldd	r18, Y+26	; 0x1a
     c06:	3b 8d       	ldd	r19, Y+27	; 0x1b
     c08:	4c 8d       	ldd	r20, Y+28	; 0x1c
     c0a:	5d 8d       	ldd	r21, Y+29	; 0x1d
     c0c:	28 1b       	sub	r18, r24
     c0e:	39 0b       	sbc	r19, r25
     c10:	4a 0b       	sbc	r20, r26
     c12:	5b 0b       	sbc	r21, r27
     c14:	88 8d       	ldd	r24, Y+24	; 0x18
     c16:	99 8d       	ldd	r25, Y+25	; 0x19
     c18:	cc 01       	movw	r24, r24
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	28 17       	cp	r18, r24
     c20:	39 07       	cpc	r19, r25
     c22:	4a 07       	cpc	r20, r26
     c24:	5b 07       	cpc	r21, r27
     c26:	58 f1       	brcs	.+86     	; 0xc7e <__stack+0x37f>
				{
					I_E++;
     c28:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <I_E.2183>
     c2c:	8f 5f       	subi	r24, 0xFF	; 255
     c2e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <I_E.2183>
					tempo_anterior_ms_E += (Semaforo.tempo_amarelo_ms);
     c32:	88 8d       	ldd	r24, Y+24	; 0x18
     c34:	99 8d       	ldd	r25, Y+25	; 0x19
     c36:	9c 01       	movw	r18, r24
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <tempo_anterior_ms_E.2185>
     c40:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <tempo_anterior_ms_E.2185+0x1>
     c44:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <tempo_anterior_ms_E.2185+0x2>
     c48:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <tempo_anterior_ms_E.2185+0x3>
     c4c:	82 0f       	add	r24, r18
     c4e:	93 1f       	adc	r25, r19
     c50:	a4 1f       	adc	r26, r20
     c52:	b5 1f       	adc	r27, r21
     c54:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <tempo_anterior_ms_E.2185>
     c58:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <tempo_anterior_ms_E.2185+0x1>
     c5c:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <tempo_anterior_ms_E.2185+0x2>
     c60:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <tempo_anterior_ms_E.2185+0x3>
					Usart_trasmit('0'+I_E); // Função para enviar os dados pela porta COM
     c64:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <I_E.2183>
     c68:	80 5d       	subi	r24, 0xD0	; 208
     c6a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Usart_trasmit>
				I_E=0; // inicia o ciclo de novo no semáforo escravo
				Usart_trasmit('0'+I_E); // Envia os dados para o semáforo escravo iniciar o ciclo de novo
			}
		}
	}
}
     c6e:	07 c0       	rjmp	.+14     	; 0xc7e <__stack+0x37f>
					Usart_trasmit('0'+I_E); // Função para enviar os dados pela porta COM
				}
			}
			else
			{
				I_E=0; // inicia o ciclo de novo no semáforo escravo
     c70:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <I_E.2183>
				Usart_trasmit('0'+I_E); // Envia os dados para o semáforo escravo iniciar o ciclo de novo
     c74:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <I_E.2183>
     c78:	80 5d       	subi	r24, 0xD0	; 208
     c7a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Usart_trasmit>
			}
		}
	}
}
     c7e:	00 00       	nop
     c80:	6d 96       	adiw	r28, 0x1d	; 29
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	08 95       	ret

00000c9a <HCSR04trigger>:
void HCSR04trigger ()
{
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	a8 97       	sbiw	r28, 0x28	; 40
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
	uint32_t tempo_execucao;
	
	PORTB |= (1<<5);
     cae:	85 e2       	ldi	r24, 0x25	; 37
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	25 e2       	ldi	r18, 0x25	; 37
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	f9 01       	movw	r30, r18
     cb8:	20 81       	ld	r18, Z
     cba:	20 62       	ori	r18, 0x20	; 32
     cbc:	fc 01       	movw	r30, r24
     cbe:	20 83       	st	Z, r18
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	a0 e2       	ldi	r26, 0x20	; 32
     cc6:	b1 e4       	ldi	r27, 0x41	; 65
     cc8:	89 87       	std	Y+9, r24	; 0x09
     cca:	9a 87       	std	Y+10, r25	; 0x0a
     ccc:	ab 87       	std	Y+11, r26	; 0x0b
     cce:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     cd0:	2b ea       	ldi	r18, 0xAB	; 171
     cd2:	3a ea       	ldi	r19, 0xAA	; 170
     cd4:	4a ea       	ldi	r20, 0xAA	; 170
     cd6:	50 e4       	ldi	r21, 0x40	; 64
     cd8:	69 85       	ldd	r22, Y+9	; 0x09
     cda:	7a 85       	ldd	r23, Y+10	; 0x0a
     cdc:	8b 85       	ldd	r24, Y+11	; 0x0b
     cde:	9c 85       	ldd	r25, Y+12	; 0x0c
     ce0:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__mulsf3>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	8d 87       	std	Y+13, r24	; 0x0d
     cea:	9e 87       	std	Y+14, r25	; 0x0e
     cec:	af 87       	std	Y+15, r26	; 0x0f
     cee:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	50 e4       	ldi	r21, 0x40	; 64
     cf8:	69 85       	ldd	r22, Y+9	; 0x09
     cfa:	7a 85       	ldd	r23, Y+10	; 0x0a
     cfc:	8b 85       	ldd	r24, Y+11	; 0x0b
     cfe:	9c 85       	ldd	r25, Y+12	; 0x0c
     d00:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	89 8b       	std	Y+17, r24	; 0x11
     d0a:	9a 8b       	std	Y+18, r25	; 0x12
     d0c:	ab 8b       	std	Y+19, r26	; 0x13
     d0e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e8       	ldi	r20, 0x80	; 128
     d16:	5f e3       	ldi	r21, 0x3F	; 63
     d18:	6d 85       	ldd	r22, Y+13	; 0x0d
     d1a:	7e 85       	ldd	r23, Y+14	; 0x0e
     d1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d1e:	98 89       	ldd	r25, Y+16	; 0x10
     d20:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
     d24:	88 23       	and	r24, r24
     d26:	1c f4       	brge	.+6      	; 0xd2e <HCSR04trigger+0x94>
		__ticks = 1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	8d 8b       	std	Y+21, r24	; 0x15
     d2c:	b2 c0       	rjmp	.+356    	; 0xe92 <HCSR04trigger+0x1f8>
	else if (__tmp2 > 65535)
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	3f ef       	ldi	r19, 0xFF	; 255
     d32:	4f e7       	ldi	r20, 0x7F	; 127
     d34:	57 e4       	ldi	r21, 0x47	; 71
     d36:	69 89       	ldd	r22, Y+17	; 0x11
     d38:	7a 89       	ldd	r23, Y+18	; 0x12
     d3a:	8b 89       	ldd	r24, Y+19	; 0x13
     d3c:	9c 89       	ldd	r25, Y+20	; 0x14
     d3e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__gesf2>
     d42:	18 16       	cp	r1, r24
     d44:	0c f0       	brlt	.+2      	; 0xd48 <HCSR04trigger+0xae>
     d46:	7b c0       	rjmp	.+246    	; 0xe3e <HCSR04trigger+0x1a4>
	{
		_delay_ms(__us / 1000.0);
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	4a e7       	ldi	r20, 0x7A	; 122
     d4e:	54 e4       	ldi	r21, 0x44	; 68
     d50:	69 85       	ldd	r22, Y+9	; 0x09
     d52:	7a 85       	ldd	r23, Y+10	; 0x0a
     d54:	8b 85       	ldd	r24, Y+11	; 0x0b
     d56:	9c 85       	ldd	r25, Y+12	; 0x0c
     d58:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__divsf3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	8e 8b       	std	Y+22, r24	; 0x16
     d62:	9f 8b       	std	Y+23, r25	; 0x17
     d64:	a8 8f       	std	Y+24, r26	; 0x18
     d66:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	4a e7       	ldi	r20, 0x7A	; 122
     d6e:	55 e4       	ldi	r21, 0x45	; 69
     d70:	6e 89       	ldd	r22, Y+22	; 0x16
     d72:	7f 89       	ldd	r23, Y+23	; 0x17
     d74:	88 8d       	ldd	r24, Y+24	; 0x18
     d76:	99 8d       	ldd	r25, Y+25	; 0x19
     d78:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	8a 8f       	std	Y+26, r24	; 0x1a
     d82:	9b 8f       	std	Y+27, r25	; 0x1b
     d84:	ac 8f       	std	Y+28, r26	; 0x1c
     d86:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e8       	ldi	r20, 0x80	; 128
     d8e:	5f e3       	ldi	r21, 0x3F	; 63
     d90:	6a 8d       	ldd	r22, Y+26	; 0x1a
     d92:	7b 8d       	ldd	r23, Y+27	; 0x1b
     d94:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d96:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d98:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
     d9c:	88 23       	and	r24, r24
     d9e:	2c f4       	brge	.+10     	; 0xdaa <HCSR04trigger+0x110>
		__ticks = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9f 8f       	std	Y+31, r25	; 0x1f
     da6:	8e 8f       	std	Y+30, r24	; 0x1e
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <HCSR04trigger+0x18e>
	else if (__tmp > 65535)
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	3f ef       	ldi	r19, 0xFF	; 255
     dae:	4f e7       	ldi	r20, 0x7F	; 127
     db0:	57 e4       	ldi	r21, 0x47	; 71
     db2:	6a 8d       	ldd	r22, Y+26	; 0x1a
     db4:	7b 8d       	ldd	r23, Y+27	; 0x1b
     db6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     db8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     dba:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__gesf2>
     dbe:	18 16       	cp	r1, r24
     dc0:	4c f5       	brge	.+82     	; 0xe14 <HCSR04trigger+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e2       	ldi	r20, 0x20	; 32
     dc8:	51 e4       	ldi	r21, 0x41	; 65
     dca:	6e 89       	ldd	r22, Y+22	; 0x16
     dcc:	7f 89       	ldd	r23, Y+23	; 0x17
     dce:	88 8d       	ldd	r24, Y+24	; 0x18
     dd0:	99 8d       	ldd	r25, Y+25	; 0x19
     dd2:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9f 8f       	std	Y+31, r25	; 0x1f
     de8:	8e 8f       	std	Y+30, r24	; 0x1e
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <HCSR04trigger+0x170>
     dec:	80 e9       	ldi	r24, 0x90	; 144
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	99 a3       	std	Y+33, r25	; 0x21
     df2:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     df4:	88 a1       	ldd	r24, Y+32	; 0x20
     df6:	99 a1       	ldd	r25, Y+33	; 0x21
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <HCSR04trigger+0x15e>
     dfc:	99 a3       	std	Y+33, r25	; 0x21
     dfe:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e00:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e02:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	9f 8f       	std	Y+31, r25	; 0x1f
     e08:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e0c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e0e:	89 2b       	or	r24, r25
     e10:	69 f7       	brne	.-38     	; 0xdec <HCSR04trigger+0x152>
     e12:	3f c0       	rjmp	.+126    	; 0xe92 <HCSR04trigger+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e14:	6a 8d       	ldd	r22, Y+26	; 0x1a
     e16:	7b 8d       	ldd	r23, Y+27	; 0x1b
     e18:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e1a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     e1c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9f 8f       	std	Y+31, r25	; 0x1f
     e26:	8e 8f       	std	Y+30, r24	; 0x1e
     e28:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e2a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e2c:	9b a3       	std	Y+35, r25	; 0x23
     e2e:	8a a3       	std	Y+34, r24	; 0x22
     e30:	8a a1       	ldd	r24, Y+34	; 0x22
     e32:	9b a1       	ldd	r25, Y+35	; 0x23
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <HCSR04trigger+0x19a>
     e38:	9b a3       	std	Y+35, r25	; 0x23
     e3a:	8a a3       	std	Y+34, r24	; 0x22
     e3c:	2a c0       	rjmp	.+84     	; 0xe92 <HCSR04trigger+0x1f8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	4f e7       	ldi	r20, 0x7F	; 127
     e44:	53 e4       	ldi	r21, 0x43	; 67
     e46:	6d 85       	ldd	r22, Y+13	; 0x0d
     e48:	7e 85       	ldd	r23, Y+14	; 0x0e
     e4a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e4c:	98 89       	ldd	r25, Y+16	; 0x10
     e4e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__gesf2>
     e52:	18 16       	cp	r1, r24
     e54:	ac f4       	brge	.+42     	; 0xe80 <HCSR04trigger+0x1e6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     e56:	69 89       	ldd	r22, Y+17	; 0x11
     e58:	7a 89       	ldd	r23, Y+18	; 0x12
     e5a:	8b 89       	ldd	r24, Y+19	; 0x13
     e5c:	9c 89       	ldd	r25, Y+20	; 0x14
     e5e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fixunssfsi>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	9d a3       	std	Y+37, r25	; 0x25
     e68:	8c a3       	std	Y+36, r24	; 0x24
     e6a:	8c a1       	ldd	r24, Y+36	; 0x24
     e6c:	9d a1       	ldd	r25, Y+37	; 0x25
     e6e:	9f a3       	std	Y+39, r25	; 0x27
     e70:	8e a3       	std	Y+38, r24	; 0x26
     e72:	8e a1       	ldd	r24, Y+38	; 0x26
     e74:	9f a1       	ldd	r25, Y+39	; 0x27
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <HCSR04trigger+0x1dc>
     e7a:	9f a3       	std	Y+39, r25	; 0x27
     e7c:	8e a3       	std	Y+38, r24	; 0x26
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <HCSR04trigger+0x204>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e80:	6d 85       	ldd	r22, Y+13	; 0x0d
     e82:	7e 85       	ldd	r23, Y+14	; 0x0e
     e84:	8f 85       	ldd	r24, Y+15	; 0x0f
     e86:	98 89       	ldd	r25, Y+16	; 0x10
     e88:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fixunssfsi>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	8d 8b       	std	Y+21, r24	; 0x15
     e92:	8d 89       	ldd	r24, Y+21	; 0x15
     e94:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e96:	88 a5       	ldd	r24, Y+40	; 0x28
     e98:	8a 95       	dec	r24
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <HCSR04trigger+0x1fe>
     e9c:	88 a7       	std	Y+40, r24	; 0x28
	_delay_us(10);
	PORTB &= ~(1<<5); // Pulso de 10us no Trigger
     e9e:	85 e2       	ldi	r24, 0x25	; 37
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	25 e2       	ldi	r18, 0x25	; 37
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	f9 01       	movw	r30, r18
     ea8:	20 81       	ld	r18, Z
     eaa:	2f 7d       	andi	r18, 0xDF	; 223
     eac:	fc 01       	movw	r30, r24
     eae:	20 83       	st	Z, r18
	
	for (int i=0; i<600000; i++) // Laço para aguardar o ínicio da borda do echo
     eb0:	1a 82       	std	Y+2, r1	; 0x02
     eb2:	19 82       	std	Y+1, r1	; 0x01
	{
		if (!(PIND&(1<<7)))
     eb4:	89 e2       	ldi	r24, 0x29	; 41
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	fc 01       	movw	r30, r24
     eba:	80 81       	ld	r24, Z
     ebc:	88 23       	and	r24, r24
     ebe:	34 f0       	brlt	.+12     	; 0xecc <HCSR04trigger+0x232>
	
	PORTB |= (1<<5);
	_delay_us(10);
	PORTB &= ~(1<<5); // Pulso de 10us no Trigger
	
	for (int i=0; i<600000; i++) // Laço para aguardar o ínicio da borda do echo
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
	{
		if (!(PIND&(1<<7)))
		continue;
		else
		break;
	}
     eca:	f4 cf       	rjmp	.-24     	; 0xeb4 <HCSR04trigger+0x21a>
	for (int i=0; i<600000; i++) // Laço para aguardar o ínicio da borda do echo
	{
		if (!(PIND&(1<<7)))
		continue;
		else
		break;
     ecc:	00 00       	nop
	}
	// Definições do Timer para contar a cada 1us		
	TCCR1A = 0x00;
     ece:	80 e8       	ldi	r24, 0x80	; 128
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	fc 01       	movw	r30, r24
     ed4:	10 82       	st	Z, r1
	TCCR1B = (1<<CS11);
     ed6:	81 e8       	ldi	r24, 0x81	; 129
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	22 e0       	ldi	r18, 0x02	; 2
     edc:	fc 01       	movw	r30, r24
     ede:	20 83       	st	Z, r18
	TCNT1 = 0x00;
     ee0:	84 e8       	ldi	r24, 0x84	; 132
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	fc 01       	movw	r30, r24
     ee6:	11 82       	std	Z+1, r1	; 0x01
     ee8:	10 82       	st	Z, r1
	
	for(int i=0;i<600000;i++) // Laço que funciona enquanto a borda do echo estiver em nível alto							
     eea:	1c 82       	std	Y+4, r1	; 0x04
     eec:	1b 82       	std	Y+3, r1	; 0x03
	{
		if(PIND & (1<<7))							
     eee:	89 e2       	ldi	r24, 0x29	; 41
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	fc 01       	movw	r30, r24
     ef4:	80 81       	ld	r24, Z
     ef6:	88 23       	and	r24, r24
     ef8:	74 f4       	brge	.+28     	; 0xf16 <HCSR04trigger+0x27c>
		{
			if(TCNT1 > 60000) 
     efa:	84 e8       	ldi	r24, 0x84	; 132
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	fc 01       	movw	r30, r24
     f00:	80 81       	ld	r24, Z
     f02:	91 81       	ldd	r25, Z+1	; 0x01
     f04:	81 36       	cpi	r24, 0x61	; 97
     f06:	9a 4e       	sbci	r25, 0xEA	; 234
     f08:	40 f4       	brcc	.+16     	; 0xf1a <HCSR04trigger+0x280>
	// Definições do Timer para contar a cada 1us		
	TCCR1A = 0x00;
	TCCR1B = (1<<CS11);
	TCNT1 = 0x00;
	
	for(int i=0;i<600000;i++) // Laço que funciona enquanto a borda do echo estiver em nível alto							
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	9c 81       	ldd	r25, Y+4	; 0x04
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	9c 83       	std	Y+4, r25	; 0x04
     f12:	8b 83       	std	Y+3, r24	; 0x03
			else
			 continue;								
		}
		else
		break;											
	}
     f14:	ec cf       	rjmp	.-40     	; 0xeee <HCSR04trigger+0x254>
			break;					
			else
			 continue;								
		}
		else
		break;											
     f16:	00 00       	nop
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <HCSR04trigger+0x282>
	for(int i=0;i<600000;i++) // Laço que funciona enquanto a borda do echo estiver em nível alto							
	{
		if(PIND & (1<<7))							
		{
			if(TCNT1 > 60000) 
			break;					
     f1a:	00 00       	nop
		}
		else
		break;											
	}
	
	tempo_execucao = TCNT1>>1; // Salva o valor da contagem na variável tempo_execucao
     f1c:	84 e8       	ldi	r24, 0x84	; 132
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	fc 01       	movw	r30, r24
     f22:	80 81       	ld	r24, Z
     f24:	91 81       	ldd	r25, Z+1	; 0x01
     f26:	96 95       	lsr	r25
     f28:	87 95       	ror	r24
     f2a:	cc 01       	movw	r24, r24
     f2c:	a0 e0       	ldi	r26, 0x00	; 0
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	af 83       	std	Y+7, r26	; 0x07
     f36:	b8 87       	std	Y+8, r27	; 0x08
	
	TCCR1B = 0x00; // Zera a contagem 
     f38:	81 e8       	ldi	r24, 0x81	; 129
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	fc 01       	movw	r30, r24
     f3e:	10 82       	st	Z, r1
	
	if(tempo_execucao < 11600) // Comparador para saber se o veículo está a 2 metros de distância do sensor 
     f40:	8d 81       	ldd	r24, Y+5	; 0x05
     f42:	9e 81       	ldd	r25, Y+6	; 0x06
     f44:	af 81       	ldd	r26, Y+7	; 0x07
     f46:	b8 85       	ldd	r27, Y+8	; 0x08
     f48:	80 35       	cpi	r24, 0x50	; 80
     f4a:	9d 42       	sbci	r25, 0x2D	; 45
     f4c:	a1 05       	cpc	r26, r1
     f4e:	b1 05       	cpc	r27, r1
     f50:	50 f4       	brcc	.+20     	; 0xf66 <HCSR04trigger+0x2cc>
	{
		PORTB |= (1<<7);
     f52:	85 e2       	ldi	r24, 0x25	; 37
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	25 e2       	ldi	r18, 0x25	; 37
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	f9 01       	movw	r30, r18
     f5c:	20 81       	ld	r18, Z
     f5e:	20 68       	ori	r18, 0x80	; 128
     f60:	fc 01       	movw	r30, r24
     f62:	20 83       	st	Z, r18
	}
	else
	PORTB &=~(1<<7);
	
	
}
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <HCSR04trigger+0x2de>
	if(tempo_execucao < 11600) // Comparador para saber se o veículo está a 2 metros de distância do sensor 
	{
		PORTB |= (1<<7);
	}
	else
	PORTB &=~(1<<7);
     f66:	85 e2       	ldi	r24, 0x25	; 37
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	25 e2       	ldi	r18, 0x25	; 37
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	f9 01       	movw	r30, r18
     f70:	20 81       	ld	r18, Z
     f72:	2f 77       	andi	r18, 0x7F	; 127
     f74:	fc 01       	movw	r30, r24
     f76:	20 83       	st	Z, r18
	
	
}
     f78:	00 00       	nop
     f7a:	a8 96       	adiw	r28, 0x28	; 40
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <pwm>:
void pwm()
{
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
	ADC_aux = 1023000/ADC-1000;
     f94:	88 e7       	ldi	r24, 0x78	; 120
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	fc 01       	movw	r30, r24
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	9c 01       	movw	r18, r24
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	88 e1       	ldi	r24, 0x18	; 24
     fa6:	9c e9       	ldi	r25, 0x9C	; 156
     fa8:	af e0       	ldi	r26, 0x0F	; 15
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__divmodsi4>
     fb4:	da 01       	movw	r26, r20
     fb6:	c9 01       	movw	r24, r18
     fb8:	88 5e       	subi	r24, 0xE8	; 232
     fba:	93 40       	sbci	r25, 0x03	; 3
     fbc:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <ADC_aux+0x1>
     fc0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <ADC_aux>
	if (ADC_aux>300)
     fc4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <ADC_aux>
     fc8:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <ADC_aux+0x1>
     fcc:	8d 32       	cpi	r24, 0x2D	; 45
     fce:	91 40       	sbci	r25, 0x01	; 1
     fd0:	28 f0       	brcs	.+10     	; 0xfdc <pwm+0x50>
	{
		OCR2B = 0;
     fd2:	84 eb       	ldi	r24, 0xB4	; 180
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	fc 01       	movw	r30, r24
     fd8:	10 82       	st	Z, r1
     fda:	1b c0       	rjmp	.+54     	; 0x1012 <pwm+0x86>
	}
	else
	{
		if  ((!(PINC&(1<<6))) || (c_min>0))
     fdc:	86 e2       	ldi	r24, 0x26	; 38
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	fc 01       	movw	r30, r24
     fe2:	80 81       	ld	r24, Z
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	80 74       	andi	r24, 0x40	; 64
     fea:	99 27       	eor	r25, r25
     fec:	89 2b       	or	r24, r25
     fee:	31 f0       	breq	.+12     	; 0xffc <pwm+0x70>
     ff0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <c_min>
     ff4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <c_min+0x1>
     ff8:	89 2b       	or	r24, r25
     ffa:	31 f0       	breq	.+12     	; 0x1008 <pwm+0x7c>
		{
			OCR2B = 255;	
     ffc:	84 eb       	ldi	r24, 0xB4	; 180
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	2f ef       	ldi	r18, 0xFF	; 255
    1002:	fc 01       	movw	r30, r24
    1004:	20 83       	st	Z, r18
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <pwm+0x86>
		}
		else
		{
			OCR2B = 85;
    1008:	84 eb       	ldi	r24, 0xB4	; 180
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	25 e5       	ldi	r18, 0x55	; 85
    100e:	fc 01       	movw	r30, r24
    1010:	20 83       	st	Z, r18
		}
	}
	anima_LCD(semaforo.tempo_verde_ms, semaforo.tempo_vermelho_ms, semaforo.tempo_amarelo_ms);
    1012:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
    1016:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    101a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    101e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
    1022:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1026:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    102a:	b9 01       	movw	r22, r18
    102c:	0e 94 07 09 	call	0x120e	; 0x120e <anima_LCD>
}
    1030:	00 00       	nop
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <estima_carros>:

void estima_carros()
{
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	00 d0       	rcall	.+0      	; 0x103e <estima_carros+0x6>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <estima_carros+0x8>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <estima_carros+0xa>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
	if (tempo_carros >= 1000) // Quando a variável tempo_carros atinge 1 segundo é feito o tratamento de informações do fluxo de carros
    1046:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tempo_carros>
    104a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tempo_carros+0x1>
    104e:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tempo_carros+0x2>
    1052:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tempo_carros+0x3>
    1056:	88 3e       	cpi	r24, 0xE8	; 232
    1058:	93 40       	sbci	r25, 0x03	; 3
    105a:	a1 05       	cpc	r26, r1
    105c:	b1 05       	cpc	r27, r1
    105e:	08 f4       	brcc	.+2      	; 0x1062 <estima_carros+0x2a>
    1060:	b1 c0       	rjmp	.+354    	; 0x11c4 <estima_carros+0x18c>
	{
		c_min = carros *60;
    1062:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <carros>
    1066:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <carros+0x1>
    106a:	4c e3       	ldi	r20, 0x3C	; 60
    106c:	42 9f       	mul	r20, r18
    106e:	c0 01       	movw	r24, r0
    1070:	43 9f       	mul	r20, r19
    1072:	90 0d       	add	r25, r0
    1074:	11 24       	eor	r1, r1
    1076:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <c_min+0x1>
    107a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <c_min>
		carros =0;
    107e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <carros+0x1>
    1082:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <carros>
		tempo_carros =0;
    1086:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <tempo_carros>
    108a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <tempo_carros+0x1>
    108e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <tempo_carros+0x2>
    1092:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <tempo_carros+0x3>
		if (modo == 0)
    1096:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
    109a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
    109e:	89 2b       	or	r24, r25
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <estima_carros+0x6c>
    10a2:	90 c0       	rjmp	.+288    	; 0x11c4 <estima_carros+0x18c>
		{
			semaforo.tempo_amarelo_ms = 1000;
    10a4:	88 ee       	ldi	r24, 0xE8	; 232
    10a6:	93 e0       	ldi	r25, 0x03	; 3
    10a8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    10ac:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
			 uint16_t amarelo_aux = (semaforo.tempo_amarelo_ms/1000)+30;
    10b0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
    10b4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    10b8:	96 95       	lsr	r25
    10ba:	87 95       	ror	r24
    10bc:	96 95       	lsr	r25
    10be:	87 95       	ror	r24
    10c0:	96 95       	lsr	r25
    10c2:	87 95       	ror	r24
    10c4:	9c 01       	movw	r18, r24
    10c6:	a5 ec       	ldi	r26, 0xC5	; 197
    10c8:	b0 e2       	ldi	r27, 0x20	; 32
    10ca:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__umulhisi3>
    10ce:	92 95       	swap	r25
    10d0:	82 95       	swap	r24
    10d2:	8f 70       	andi	r24, 0x0F	; 15
    10d4:	89 27       	eor	r24, r25
    10d6:	9f 70       	andi	r25, 0x0F	; 15
    10d8:	89 27       	eor	r24, r25
    10da:	4e 96       	adiw	r24, 0x1e	; 30
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
			semaforo.tempo_verde_ms = ((c_min/60)+1)*1000;
    10e0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <c_min>
    10e4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <c_min+0x1>
    10e8:	9c 01       	movw	r18, r24
    10ea:	a9 e8       	ldi	r26, 0x89	; 137
    10ec:	b8 e8       	ldi	r27, 0x88	; 136
    10ee:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__umulhisi3>
    10f2:	96 95       	lsr	r25
    10f4:	87 95       	ror	r24
    10f6:	92 95       	swap	r25
    10f8:	82 95       	swap	r24
    10fa:	8f 70       	andi	r24, 0x0F	; 15
    10fc:	89 27       	eor	r24, r25
    10fe:	9f 70       	andi	r25, 0x0F	; 15
    1100:	89 27       	eor	r24, r25
    1102:	ac 01       	movw	r20, r24
    1104:	4f 5f       	subi	r20, 0xFF	; 255
    1106:	5f 4f       	sbci	r21, 0xFF	; 255
    1108:	28 ee       	ldi	r18, 0xE8	; 232
    110a:	33 e0       	ldi	r19, 0x03	; 3
    110c:	42 9f       	mul	r20, r18
    110e:	c0 01       	movw	r24, r0
    1110:	43 9f       	mul	r20, r19
    1112:	90 0d       	add	r25, r0
    1114:	52 9f       	mul	r21, r18
    1116:	90 0d       	add	r25, r0
    1118:	11 24       	eor	r1, r1
    111a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    111e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			 uint16_t verde_aux = (semaforo.tempo_verde_ms/1000)+10;
    1122:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1126:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    112a:	96 95       	lsr	r25
    112c:	87 95       	ror	r24
    112e:	96 95       	lsr	r25
    1130:	87 95       	ror	r24
    1132:	96 95       	lsr	r25
    1134:	87 95       	ror	r24
    1136:	9c 01       	movw	r18, r24
    1138:	a5 ec       	ldi	r26, 0xC5	; 197
    113a:	b0 e2       	ldi	r27, 0x20	; 32
    113c:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__umulhisi3>
    1140:	92 95       	swap	r25
    1142:	82 95       	swap	r24
    1144:	8f 70       	andi	r24, 0x0F	; 15
    1146:	89 27       	eor	r24, r25
    1148:	9f 70       	andi	r25, 0x0F	; 15
    114a:	89 27       	eor	r24, r25
    114c:	0a 96       	adiw	r24, 0x0a	; 10
    114e:	9c 83       	std	Y+4, r25	; 0x04
    1150:	8b 83       	std	Y+3, r24	; 0x03
			semaforo.tempo_vermelho_ms = (-(c_min/60)+9)*1000;
    1152:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <c_min>
    1156:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <c_min+0x1>
    115a:	9c 01       	movw	r18, r24
    115c:	a9 e8       	ldi	r26, 0x89	; 137
    115e:	b8 e8       	ldi	r27, 0x88	; 136
    1160:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__umulhisi3>
    1164:	ac 01       	movw	r20, r24
    1166:	56 95       	lsr	r21
    1168:	47 95       	ror	r20
    116a:	52 95       	swap	r21
    116c:	42 95       	swap	r20
    116e:	4f 70       	andi	r20, 0x0F	; 15
    1170:	45 27       	eor	r20, r21
    1172:	5f 70       	andi	r21, 0x0F	; 15
    1174:	45 27       	eor	r20, r21
    1176:	28 e1       	ldi	r18, 0x18	; 24
    1178:	3c ef       	ldi	r19, 0xFC	; 252
    117a:	42 9f       	mul	r20, r18
    117c:	c0 01       	movw	r24, r0
    117e:	43 9f       	mul	r20, r19
    1180:	90 0d       	add	r25, r0
    1182:	52 9f       	mul	r21, r18
    1184:	90 0d       	add	r25, r0
    1186:	11 24       	eor	r1, r1
    1188:	88 5d       	subi	r24, 0xD8	; 216
    118a:	9c 4d       	sbci	r25, 0xDC	; 220
    118c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
    1190:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			 uint16_t vermelho_aux = (semaforo.tempo_vermelho_ms/1000)+20;
    1194:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1198:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
    119c:	96 95       	lsr	r25
    119e:	87 95       	ror	r24
    11a0:	96 95       	lsr	r25
    11a2:	87 95       	ror	r24
    11a4:	96 95       	lsr	r25
    11a6:	87 95       	ror	r24
    11a8:	9c 01       	movw	r18, r24
    11aa:	a5 ec       	ldi	r26, 0xC5	; 197
    11ac:	b0 e2       	ldi	r27, 0x20	; 32
    11ae:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__umulhisi3>
    11b2:	92 95       	swap	r25
    11b4:	82 95       	swap	r24
    11b6:	8f 70       	andi	r24, 0x0F	; 15
    11b8:	89 27       	eor	r24, r25
    11ba:	9f 70       	andi	r25, 0x0F	; 15
    11bc:	89 27       	eor	r24, r25
    11be:	44 96       	adiw	r24, 0x14	; 20
    11c0:	9e 83       	std	Y+6, r25	; 0x06
    11c2:	8d 83       	std	Y+5, r24	; 0x05
		}
	}
}
    11c4:	00 00       	nop
    11c6:	26 96       	adiw	r28, 0x06	; 6
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <Usart_trasmit>:

void Usart_trasmit(unsigned char data)
{
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	1f 92       	push	r1
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
	while (!( UCSR0A & (1<<UDRE0)));
    11e4:	00 00       	nop
    11e6:	80 ec       	ldi	r24, 0xC0	; 192
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	fc 01       	movw	r30, r24
    11ec:	80 81       	ld	r24, Z
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	80 72       	andi	r24, 0x20	; 32
    11f4:	99 27       	eor	r25, r25
    11f6:	89 2b       	or	r24, r25
    11f8:	b1 f3       	breq	.-20     	; 0x11e6 <Usart_trasmit+0xe>
	UDR0 = data;
    11fa:	86 ec       	ldi	r24, 0xC6	; 198
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	29 81       	ldd	r18, Y+1	; 0x01
    1200:	fc 01       	movw	r30, r24
    1202:	20 83       	st	Z, r18
}
    1204:	00 00       	nop
    1206:	0f 90       	pop	r0
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <anima_LCD>:

void anima_LCD(uint16_t Tempo_verde_ms , uint16_t Tempo_vermelho_ms, uint16_t Tempo_amarelo_ms) //Função para manipular as informações mostradas no LCD
{
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	66 97       	sbiw	r28, 0x16	; 22
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	9a 8b       	std	Y+18, r25	; 0x12
    1224:	89 8b       	std	Y+17, r24	; 0x11
    1226:	7c 8b       	std	Y+20, r23	; 0x14
    1228:	6b 8b       	std	Y+19, r22	; 0x13
    122a:	5e 8b       	std	Y+22, r21	; 0x16
    122c:	4d 8b       	std	Y+21, r20	; 0x15
	unsigned char tempo_amarelo_s_string[2];
	unsigned char c_min_string[4];
	unsigned char pessoas_aux[2];
	unsigned char lux_LDR[4];
	
	sprintf (tempo_verde_s_string, "%u", Tempo_verde_ms/1000); //Funções para converter os números em strings
    122e:	89 89       	ldd	r24, Y+17	; 0x11
    1230:	9a 89       	ldd	r25, Y+18	; 0x12
    1232:	96 95       	lsr	r25
    1234:	87 95       	ror	r24
    1236:	96 95       	lsr	r25
    1238:	87 95       	ror	r24
    123a:	96 95       	lsr	r25
    123c:	87 95       	ror	r24
    123e:	9c 01       	movw	r18, r24
    1240:	a5 ec       	ldi	r26, 0xC5	; 197
    1242:	b0 e2       	ldi	r27, 0x20	; 32
    1244:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__umulhisi3>
    1248:	92 95       	swap	r25
    124a:	82 95       	swap	r24
    124c:	8f 70       	andi	r24, 0x0F	; 15
    124e:	89 27       	eor	r24, r25
    1250:	9f 70       	andi	r25, 0x0F	; 15
    1252:	89 27       	eor	r24, r25
    1254:	29 2f       	mov	r18, r25
    1256:	2f 93       	push	r18
    1258:	8f 93       	push	r24
    125a:	89 e1       	ldi	r24, 0x19	; 25
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	89 2f       	mov	r24, r25
    1260:	8f 93       	push	r24
    1262:	89 e1       	ldi	r24, 0x19	; 25
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	8f 93       	push	r24
    1268:	ce 01       	movw	r24, r28
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	9f 93       	push	r25
    126e:	8f 93       	push	r24
    1270:	0e 94 10 10 	call	0x2020	; 0x2020 <sprintf>
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
	sprintf(tempo_vermelho_s_string, "%u", Tempo_vermelho_ms/1000);
    1280:	8b 89       	ldd	r24, Y+19	; 0x13
    1282:	9c 89       	ldd	r25, Y+20	; 0x14
    1284:	96 95       	lsr	r25
    1286:	87 95       	ror	r24
    1288:	96 95       	lsr	r25
    128a:	87 95       	ror	r24
    128c:	96 95       	lsr	r25
    128e:	87 95       	ror	r24
    1290:	9c 01       	movw	r18, r24
    1292:	a5 ec       	ldi	r26, 0xC5	; 197
    1294:	b0 e2       	ldi	r27, 0x20	; 32
    1296:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__umulhisi3>
    129a:	92 95       	swap	r25
    129c:	82 95       	swap	r24
    129e:	8f 70       	andi	r24, 0x0F	; 15
    12a0:	89 27       	eor	r24, r25
    12a2:	9f 70       	andi	r25, 0x0F	; 15
    12a4:	89 27       	eor	r24, r25
    12a6:	29 2f       	mov	r18, r25
    12a8:	2f 93       	push	r18
    12aa:	8f 93       	push	r24
    12ac:	89 e1       	ldi	r24, 0x19	; 25
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	89 2f       	mov	r24, r25
    12b2:	8f 93       	push	r24
    12b4:	89 e1       	ldi	r24, 0x19	; 25
    12b6:	91 e0       	ldi	r25, 0x01	; 1
    12b8:	8f 93       	push	r24
    12ba:	ce 01       	movw	r24, r28
    12bc:	03 96       	adiw	r24, 0x03	; 3
    12be:	29 2f       	mov	r18, r25
    12c0:	2f 93       	push	r18
    12c2:	8f 93       	push	r24
    12c4:	0e 94 10 10 	call	0x2020	; 0x2020 <sprintf>
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
	sprintf (tempo_amarelo_s_string, "%u", Tempo_amarelo_ms/1000);
    12d4:	8d 89       	ldd	r24, Y+21	; 0x15
    12d6:	9e 89       	ldd	r25, Y+22	; 0x16
    12d8:	96 95       	lsr	r25
    12da:	87 95       	ror	r24
    12dc:	96 95       	lsr	r25
    12de:	87 95       	ror	r24
    12e0:	96 95       	lsr	r25
    12e2:	87 95       	ror	r24
    12e4:	9c 01       	movw	r18, r24
    12e6:	a5 ec       	ldi	r26, 0xC5	; 197
    12e8:	b0 e2       	ldi	r27, 0x20	; 32
    12ea:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__umulhisi3>
    12ee:	92 95       	swap	r25
    12f0:	82 95       	swap	r24
    12f2:	8f 70       	andi	r24, 0x0F	; 15
    12f4:	89 27       	eor	r24, r25
    12f6:	9f 70       	andi	r25, 0x0F	; 15
    12f8:	89 27       	eor	r24, r25
    12fa:	29 2f       	mov	r18, r25
    12fc:	2f 93       	push	r18
    12fe:	8f 93       	push	r24
    1300:	89 e1       	ldi	r24, 0x19	; 25
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	89 2f       	mov	r24, r25
    1306:	8f 93       	push	r24
    1308:	89 e1       	ldi	r24, 0x19	; 25
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	8f 93       	push	r24
    130e:	ce 01       	movw	r24, r28
    1310:	05 96       	adiw	r24, 0x05	; 5
    1312:	29 2f       	mov	r18, r25
    1314:	2f 93       	push	r18
    1316:	8f 93       	push	r24
    1318:	0e 94 10 10 	call	0x2020	; 0x2020 <sprintf>
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
	sprintf (c_min_string, "%u", c_min);
    1328:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <c_min>
    132c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <c_min+0x1>
    1330:	29 2f       	mov	r18, r25
    1332:	2f 93       	push	r18
    1334:	8f 93       	push	r24
    1336:	89 e1       	ldi	r24, 0x19	; 25
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	89 2f       	mov	r24, r25
    133c:	8f 93       	push	r24
    133e:	89 e1       	ldi	r24, 0x19	; 25
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	8f 93       	push	r24
    1344:	ce 01       	movw	r24, r28
    1346:	07 96       	adiw	r24, 0x07	; 7
    1348:	29 2f       	mov	r18, r25
    134a:	2f 93       	push	r18
    134c:	8f 93       	push	r24
    134e:	0e 94 10 10 	call	0x2020	; 0x2020 <sprintf>
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
	sprintf (pessoas_aux, "%u", pessoas);
    135e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <pessoas>
    1362:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <pessoas+0x1>
    1366:	29 2f       	mov	r18, r25
    1368:	2f 93       	push	r18
    136a:	8f 93       	push	r24
    136c:	89 e1       	ldi	r24, 0x19	; 25
    136e:	91 e0       	ldi	r25, 0x01	; 1
    1370:	89 2f       	mov	r24, r25
    1372:	8f 93       	push	r24
    1374:	89 e1       	ldi	r24, 0x19	; 25
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	8f 93       	push	r24
    137a:	ce 01       	movw	r24, r28
    137c:	0b 96       	adiw	r24, 0x0b	; 11
    137e:	29 2f       	mov	r18, r25
    1380:	2f 93       	push	r18
    1382:	8f 93       	push	r24
    1384:	0e 94 10 10 	call	0x2020	; 0x2020 <sprintf>
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
	sprintf (lux_LDR, "%u", ADC_aux);
    1394:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <ADC_aux>
    1398:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <ADC_aux+0x1>
    139c:	29 2f       	mov	r18, r25
    139e:	2f 93       	push	r18
    13a0:	8f 93       	push	r24
    13a2:	89 e1       	ldi	r24, 0x19	; 25
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	89 2f       	mov	r24, r25
    13a8:	8f 93       	push	r24
    13aa:	89 e1       	ldi	r24, 0x19	; 25
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	8f 93       	push	r24
    13b0:	ce 01       	movw	r24, r28
    13b2:	0d 96       	adiw	r24, 0x0d	; 13
    13b4:	29 2f       	mov	r18, r25
    13b6:	2f 93       	push	r18
    13b8:	8f 93       	push	r24
    13ba:	0e 94 10 10 	call	0x2020	; 0x2020 <sprintf>
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
		
	nokia_lcd_clear(); //Funções para mostrar as informações no LCD
    13ca:	0e 94 9c 0c 	call	0x1938	; 0x1938 <nokia_lcd_clear>
	
	nokia_lcd_set_cursor(0,10);
    13ce:	6a e0       	ldi	r22, 0x0A	; 10
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	
	nokia_lcd_set_cursor(0,10);
    13d6:	6a e0       	ldi	r22, 0x0A	; 10
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Modo",1);
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	8c e1       	ldi	r24, 0x1C	; 28
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	nokia_lcd_set_cursor(32,10);
    13e8:	6a e0       	ldi	r22, 0x0A	; 10
    13ea:	80 e2       	ldi	r24, 0x20	; 32
    13ec:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	if (modo)
    13f0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
    13f4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
    13f8:	89 2b       	or	r24, r25
    13fa:	29 f0       	breq	.+10     	; 0x1406 <anima_LCD+0x1f8>
	{
		nokia_lcd_write_string("M",1);
    13fc:	61 e0       	ldi	r22, 0x01	; 1
    13fe:	81 e2       	ldi	r24, 0x21	; 33
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	}
	if (!modo)
    1406:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
    140a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
    140e:	89 2b       	or	r24, r25
    1410:	29 f4       	brne	.+10     	; 0x141c <anima_LCD+0x20e>
	{
		nokia_lcd_write_string("A",1);
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	83 e2       	ldi	r24, 0x23	; 35
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	}
	nokia_lcd_set_cursor(0,20);
    141c:	64 e1       	ldi	r22, 0x14	; 20
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T.Vd",1);
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	85 e2       	ldi	r24, 0x25	; 37
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	nokia_lcd_set_cursor(32,20);
    142e:	64 e1       	ldi	r22, 0x14	; 20
    1430:	80 e2       	ldi	r24, 0x20	; 32
    1432:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	nokia_lcd_write_string(tempo_verde_s_string,1);
    1436:	61 e0       	ldi	r22, 0x01	; 1
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0,30);
    1440:	6e e1       	ldi	r22, 0x1E	; 30
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T.Vm",1);
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	8a e2       	ldi	r24, 0x2A	; 42
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	nokia_lcd_set_cursor(32,30);
    1452:	6e e1       	ldi	r22, 0x1E	; 30
    1454:	80 e2       	ldi	r24, 0x20	; 32
    1456:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	nokia_lcd_write_string(tempo_vermelho_s_string,1);
    145a:	ce 01       	movw	r24, r28
    145c:	03 96       	adiw	r24, 0x03	; 3
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0,40);
    1464:	68 e2       	ldi	r22, 0x28	; 40
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T.Am",1);
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	8f e2       	ldi	r24, 0x2F	; 47
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	nokia_lcd_set_cursor(32,40);
    1476:	68 e2       	ldi	r22, 0x28	; 40
    1478:	80 e2       	ldi	r24, 0x20	; 32
    147a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	nokia_lcd_write_string(tempo_amarelo_s_string,1);
    147e:	ce 01       	movw	r24, r28
    1480:	05 96       	adiw	r24, 0x05	; 5
    1482:	61 e0       	ldi	r22, 0x01	; 1
    1484:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	nokia_lcd_set_cursor(52,30);
    1488:	6e e1       	ldi	r22, 0x1E	; 30
    148a:	84 e3       	ldi	r24, 0x34	; 52
    148c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	nokia_lcd_write_string(c_min_string,1);
    1490:	ce 01       	movw	r24, r28
    1492:	07 96       	adiw	r24, 0x07	; 7
    1494:	61 e0       	ldi	r22, 0x01	; 1
    1496:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	nokia_lcd_set_cursor(52,41);
    149a:	69 e2       	ldi	r22, 0x29	; 41
    149c:	84 e3       	ldi	r24, 0x34	; 52
    149e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("C/min",1);
    14a2:	61 e0       	ldi	r22, 0x01	; 1
    14a4:	84 e3       	ldi	r24, 0x34	; 52
    14a6:	91 e0       	ldi	r25, 0x01	; 1
    14a8:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	nokia_lcd_set_cursor(52,5);
    14ac:	65 e0       	ldi	r22, 0x05	; 5
    14ae:	84 e3       	ldi	r24, 0x34	; 52
    14b0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	nokia_lcd_write_string(lux_LDR,1);
    14b4:	ce 01       	movw	r24, r28
    14b6:	0d 96       	adiw	r24, 0x0d	; 13
    14b8:	61 e0       	ldi	r22, 0x01	; 1
    14ba:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	nokia_lcd_set_cursor(52,15);
    14be:	6f e0       	ldi	r22, 0x0F	; 15
    14c0:	84 e3       	ldi	r24, 0x34	; 52
    14c2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Lux",1);
    14c6:	61 e0       	ldi	r22, 0x01	; 1
    14c8:	8a e3       	ldi	r24, 0x3A	; 58
    14ca:	91 e0       	ldi	r25, 0x01	; 1
    14cc:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	
	nokia_lcd_set_cursor(40,10+selecao_parametro*10);
    14d0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <selecao_parametro>
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	88 0f       	add	r24, r24
    14dc:	98 2f       	mov	r25, r24
    14de:	99 0f       	add	r25, r25
    14e0:	99 0f       	add	r25, r25
    14e2:	89 0f       	add	r24, r25
    14e4:	68 2f       	mov	r22, r24
    14e6:	88 e2       	ldi	r24, 0x28	; 40
    14e8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("<",1);
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	8e e3       	ldi	r24, 0x3E	; 62
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <nokia_lcd_write_string>
	
	nokia_lcd_render();
    14f6:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <nokia_lcd_render>
    14fa:	00 00       	nop
    14fc:	66 96       	adiw	r28, 0x16	; 22
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	08 95       	ret

0000150e <write>:
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
}
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	00 d0       	rcall	.+0      	; 0x1516 <write+0x8>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	6a 83       	std	Y+2, r22	; 0x02
    151e:	88 e2       	ldi	r24, 0x28	; 40
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	28 e2       	ldi	r18, 0x28	; 40
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	f9 01       	movw	r30, r18
    1528:	20 81       	ld	r18, Z
    152a:	2d 7f       	andi	r18, 0xFD	; 253
    152c:	fc 01       	movw	r30, r24
    152e:	20 83       	st	Z, r18
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	88 23       	and	r24, r24
    1534:	51 f0       	breq	.+20     	; 0x154a <write+0x3c>
    1536:	88 e2       	ldi	r24, 0x28	; 40
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	28 e2       	ldi	r18, 0x28	; 40
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	f9 01       	movw	r30, r18
    1540:	20 81       	ld	r18, Z
    1542:	28 60       	ori	r18, 0x08	; 8
    1544:	fc 01       	movw	r30, r24
    1546:	20 83       	st	Z, r18
    1548:	09 c0       	rjmp	.+18     	; 0x155c <write+0x4e>
    154a:	88 e2       	ldi	r24, 0x28	; 40
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	28 e2       	ldi	r18, 0x28	; 40
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	f9 01       	movw	r30, r18
    1554:	20 81       	ld	r18, Z
    1556:	27 7f       	andi	r18, 0xF7	; 247
    1558:	fc 01       	movw	r30, r24
    155a:	20 83       	st	Z, r18
    155c:	10 e0       	ldi	r17, 0x00	; 0
    155e:	3c c0       	rjmp	.+120    	; 0x15d8 <write+0xca>
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	21 2f       	mov	r18, r17
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	47 e0       	ldi	r20, 0x07	; 7
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	ba 01       	movw	r22, r20
    1570:	62 1b       	sub	r22, r18
    1572:	73 0b       	sbc	r23, r19
    1574:	9b 01       	movw	r18, r22
    1576:	02 c0       	rjmp	.+4      	; 0x157c <write+0x6e>
    1578:	95 95       	asr	r25
    157a:	87 95       	ror	r24
    157c:	2a 95       	dec	r18
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <write+0x6a>
    1580:	81 70       	andi	r24, 0x01	; 1
    1582:	99 27       	eor	r25, r25
    1584:	89 2b       	or	r24, r25
    1586:	51 f0       	breq	.+20     	; 0x159c <write+0x8e>
    1588:	88 e2       	ldi	r24, 0x28	; 40
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	28 e2       	ldi	r18, 0x28	; 40
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	f9 01       	movw	r30, r18
    1592:	20 81       	ld	r18, Z
    1594:	20 61       	ori	r18, 0x10	; 16
    1596:	fc 01       	movw	r30, r24
    1598:	20 83       	st	Z, r18
    159a:	09 c0       	rjmp	.+18     	; 0x15ae <write+0xa0>
    159c:	88 e2       	ldi	r24, 0x28	; 40
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	28 e2       	ldi	r18, 0x28	; 40
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	f9 01       	movw	r30, r18
    15a6:	20 81       	ld	r18, Z
    15a8:	2f 7e       	andi	r18, 0xEF	; 239
    15aa:	fc 01       	movw	r30, r24
    15ac:	20 83       	st	Z, r18
    15ae:	88 e2       	ldi	r24, 0x28	; 40
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	28 e2       	ldi	r18, 0x28	; 40
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	f9 01       	movw	r30, r18
    15b8:	20 81       	ld	r18, Z
    15ba:	20 62       	ori	r18, 0x20	; 32
    15bc:	fc 01       	movw	r30, r24
    15be:	20 83       	st	Z, r18
    15c0:	88 e2       	ldi	r24, 0x28	; 40
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	28 e2       	ldi	r18, 0x28	; 40
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	f9 01       	movw	r30, r18
    15ca:	20 81       	ld	r18, Z
    15cc:	2f 7d       	andi	r18, 0xDF	; 223
    15ce:	fc 01       	movw	r30, r24
    15d0:	20 83       	st	Z, r18
    15d2:	81 2f       	mov	r24, r17
    15d4:	11 e0       	ldi	r17, 0x01	; 1
    15d6:	18 0f       	add	r17, r24
    15d8:	18 30       	cpi	r17, 0x08	; 8
    15da:	10 f2       	brcs	.-124    	; 0x1560 <write+0x52>
    15dc:	88 e2       	ldi	r24, 0x28	; 40
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	28 e2       	ldi	r18, 0x28	; 40
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	f9 01       	movw	r30, r18
    15e6:	20 81       	ld	r18, Z
    15e8:	22 60       	ori	r18, 0x02	; 2
    15ea:	fc 01       	movw	r30, r24
    15ec:	20 83       	st	Z, r18
    15ee:	00 00       	nop
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	08 95       	ret

000015fc <write_cmd>:
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	1f 92       	push	r1
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	60 e0       	ldi	r22, 0x00	; 0
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	0e 94 87 0a 	call	0x150e	; 0x150e <write>
    1610:	00 00       	nop
    1612:	0f 90       	pop	r0
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	08 95       	ret

0000161a <write_data>:
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	1f 92       	push	r1
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	61 e0       	ldi	r22, 0x01	; 1
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	0e 94 87 0a 	call	0x150e	; 0x150e <write>
    162e:	00 00       	nop
    1630:	0f 90       	pop	r0
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <nokia_lcd_init>:
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	6c 97       	sbiw	r28, 0x1c	; 28
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	87 e2       	ldi	r24, 0x27	; 39
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	27 e2       	ldi	r18, 0x27	; 39
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	f9 01       	movw	r30, r18
    165a:	20 81       	ld	r18, Z
    165c:	22 60       	ori	r18, 0x02	; 2
    165e:	fc 01       	movw	r30, r24
    1660:	20 83       	st	Z, r18
    1662:	87 e2       	ldi	r24, 0x27	; 39
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	27 e2       	ldi	r18, 0x27	; 39
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	f9 01       	movw	r30, r18
    166c:	20 81       	ld	r18, Z
    166e:	24 60       	ori	r18, 0x04	; 4
    1670:	fc 01       	movw	r30, r24
    1672:	20 83       	st	Z, r18
    1674:	87 e2       	ldi	r24, 0x27	; 39
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	27 e2       	ldi	r18, 0x27	; 39
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	f9 01       	movw	r30, r18
    167e:	20 81       	ld	r18, Z
    1680:	28 60       	ori	r18, 0x08	; 8
    1682:	fc 01       	movw	r30, r24
    1684:	20 83       	st	Z, r18
    1686:	87 e2       	ldi	r24, 0x27	; 39
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	27 e2       	ldi	r18, 0x27	; 39
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	f9 01       	movw	r30, r18
    1690:	20 81       	ld	r18, Z
    1692:	20 61       	ori	r18, 0x10	; 16
    1694:	fc 01       	movw	r30, r24
    1696:	20 83       	st	Z, r18
    1698:	87 e2       	ldi	r24, 0x27	; 39
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	27 e2       	ldi	r18, 0x27	; 39
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	f9 01       	movw	r30, r18
    16a2:	20 81       	ld	r18, Z
    16a4:	20 62       	ori	r18, 0x20	; 32
    16a6:	fc 01       	movw	r30, r24
    16a8:	20 83       	st	Z, r18
    16aa:	88 e2       	ldi	r24, 0x28	; 40
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	28 e2       	ldi	r18, 0x28	; 40
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	f9 01       	movw	r30, r18
    16b4:	20 81       	ld	r18, Z
    16b6:	24 60       	ori	r18, 0x04	; 4
    16b8:	fc 01       	movw	r30, r24
    16ba:	20 83       	st	Z, r18
    16bc:	88 e2       	ldi	r24, 0x28	; 40
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	28 e2       	ldi	r18, 0x28	; 40
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	f9 01       	movw	r30, r18
    16c6:	20 81       	ld	r18, Z
    16c8:	22 60       	ori	r18, 0x02	; 2
    16ca:	fc 01       	movw	r30, r24
    16cc:	20 83       	st	Z, r18
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a0 e2       	ldi	r26, 0x20	; 32
    16d4:	b1 e4       	ldi	r27, 0x41	; 65
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	ab 83       	std	Y+3, r26	; 0x03
    16dc:	bc 83       	std	Y+4, r27	; 0x04
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	4a e7       	ldi	r20, 0x7A	; 122
    16e4:	53 e4       	ldi	r21, 0x43	; 67
    16e6:	69 81       	ldd	r22, Y+1	; 0x01
    16e8:	7a 81       	ldd	r23, Y+2	; 0x02
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__mulsf3>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	8b 8b       	std	Y+19, r24	; 0x13
    16f8:	9c 8b       	std	Y+20, r25	; 0x14
    16fa:	ad 8b       	std	Y+21, r26	; 0x15
    16fc:	be 8b       	std	Y+22, r27	; 0x16
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e8       	ldi	r20, 0x80	; 128
    1704:	5f e3       	ldi	r21, 0x3F	; 63
    1706:	6b 89       	ldd	r22, Y+19	; 0x13
    1708:	7c 89       	ldd	r23, Y+20	; 0x14
    170a:	8d 89       	ldd	r24, Y+21	; 0x15
    170c:	9e 89       	ldd	r25, Y+22	; 0x16
    170e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
    1712:	88 23       	and	r24, r24
    1714:	2c f4       	brge	.+10     	; 0x1720 <nokia_lcd_init+0xe8>
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	98 8f       	std	Y+24, r25	; 0x18
    171c:	8f 8b       	std	Y+23, r24	; 0x17
    171e:	3f c0       	rjmp	.+126    	; 0x179e <nokia_lcd_init+0x166>
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	3f ef       	ldi	r19, 0xFF	; 255
    1724:	4f e7       	ldi	r20, 0x7F	; 127
    1726:	57 e4       	ldi	r21, 0x47	; 71
    1728:	6b 89       	ldd	r22, Y+19	; 0x13
    172a:	7c 89       	ldd	r23, Y+20	; 0x14
    172c:	8d 89       	ldd	r24, Y+21	; 0x15
    172e:	9e 89       	ldd	r25, Y+22	; 0x16
    1730:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__gesf2>
    1734:	18 16       	cp	r1, r24
    1736:	4c f5       	brge	.+82     	; 0x178a <nokia_lcd_init+0x152>
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e2       	ldi	r20, 0x20	; 32
    173e:	51 e4       	ldi	r21, 0x41	; 65
    1740:	69 81       	ldd	r22, Y+1	; 0x01
    1742:	7a 81       	ldd	r23, Y+2	; 0x02
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	bc 01       	movw	r22, r24
    1752:	cd 01       	movw	r24, r26
    1754:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	98 8f       	std	Y+24, r25	; 0x18
    175e:	8f 8b       	std	Y+23, r24	; 0x17
    1760:	0f c0       	rjmp	.+30     	; 0x1780 <nokia_lcd_init+0x148>
    1762:	89 e1       	ldi	r24, 0x19	; 25
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	9a 8f       	std	Y+26, r25	; 0x1a
    1768:	89 8f       	std	Y+25, r24	; 0x19
    176a:	89 8d       	ldd	r24, Y+25	; 0x19
    176c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <nokia_lcd_init+0x136>
    1772:	9a 8f       	std	Y+26, r25	; 0x1a
    1774:	89 8f       	std	Y+25, r24	; 0x19
    1776:	8f 89       	ldd	r24, Y+23	; 0x17
    1778:	98 8d       	ldd	r25, Y+24	; 0x18
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	98 8f       	std	Y+24, r25	; 0x18
    177e:	8f 8b       	std	Y+23, r24	; 0x17
    1780:	8f 89       	ldd	r24, Y+23	; 0x17
    1782:	98 8d       	ldd	r25, Y+24	; 0x18
    1784:	89 2b       	or	r24, r25
    1786:	69 f7       	brne	.-38     	; 0x1762 <nokia_lcd_init+0x12a>
    1788:	14 c0       	rjmp	.+40     	; 0x17b2 <nokia_lcd_init+0x17a>
    178a:	6b 89       	ldd	r22, Y+19	; 0x13
    178c:	7c 89       	ldd	r23, Y+20	; 0x14
    178e:	8d 89       	ldd	r24, Y+21	; 0x15
    1790:	9e 89       	ldd	r25, Y+22	; 0x16
    1792:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	98 8f       	std	Y+24, r25	; 0x18
    179c:	8f 8b       	std	Y+23, r24	; 0x17
    179e:	8f 89       	ldd	r24, Y+23	; 0x17
    17a0:	98 8d       	ldd	r25, Y+24	; 0x18
    17a2:	9c 8f       	std	Y+28, r25	; 0x1c
    17a4:	8b 8f       	std	Y+27, r24	; 0x1b
    17a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <nokia_lcd_init+0x172>
    17ae:	9c 8f       	std	Y+28, r25	; 0x1c
    17b0:	8b 8f       	std	Y+27, r24	; 0x1b
    17b2:	88 e2       	ldi	r24, 0x28	; 40
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	28 e2       	ldi	r18, 0x28	; 40
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	f9 01       	movw	r30, r18
    17bc:	20 81       	ld	r18, Z
    17be:	2b 7f       	andi	r18, 0xFB	; 251
    17c0:	fc 01       	movw	r30, r24
    17c2:	20 83       	st	Z, r18
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	ac e8       	ldi	r26, 0x8C	; 140
    17ca:	b2 e4       	ldi	r27, 0x42	; 66
    17cc:	8d 83       	std	Y+5, r24	; 0x05
    17ce:	9e 83       	std	Y+6, r25	; 0x06
    17d0:	af 83       	std	Y+7, r26	; 0x07
    17d2:	b8 87       	std	Y+8, r27	; 0x08
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	4a e7       	ldi	r20, 0x7A	; 122
    17da:	53 e4       	ldi	r21, 0x43	; 67
    17dc:	6d 81       	ldd	r22, Y+5	; 0x05
    17de:	7e 81       	ldd	r23, Y+6	; 0x06
    17e0:	8f 81       	ldd	r24, Y+7	; 0x07
    17e2:	98 85       	ldd	r25, Y+8	; 0x08
    17e4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	89 87       	std	Y+9, r24	; 0x09
    17ee:	9a 87       	std	Y+10, r25	; 0x0a
    17f0:	ab 87       	std	Y+11, r26	; 0x0b
    17f2:	bc 87       	std	Y+12, r27	; 0x0c
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e8       	ldi	r20, 0x80	; 128
    17fa:	5f e3       	ldi	r21, 0x3F	; 63
    17fc:	69 85       	ldd	r22, Y+9	; 0x09
    17fe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1800:	8b 85       	ldd	r24, Y+11	; 0x0b
    1802:	9c 85       	ldd	r25, Y+12	; 0x0c
    1804:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__cmpsf2>
    1808:	88 23       	and	r24, r24
    180a:	2c f4       	brge	.+10     	; 0x1816 <nokia_lcd_init+0x1de>
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9e 87       	std	Y+14, r25	; 0x0e
    1812:	8d 87       	std	Y+13, r24	; 0x0d
    1814:	3f c0       	rjmp	.+126    	; 0x1894 <nokia_lcd_init+0x25c>
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	3f ef       	ldi	r19, 0xFF	; 255
    181a:	4f e7       	ldi	r20, 0x7F	; 127
    181c:	57 e4       	ldi	r21, 0x47	; 71
    181e:	69 85       	ldd	r22, Y+9	; 0x09
    1820:	7a 85       	ldd	r23, Y+10	; 0x0a
    1822:	8b 85       	ldd	r24, Y+11	; 0x0b
    1824:	9c 85       	ldd	r25, Y+12	; 0x0c
    1826:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__gesf2>
    182a:	18 16       	cp	r1, r24
    182c:	4c f5       	brge	.+82     	; 0x1880 <nokia_lcd_init+0x248>
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e2       	ldi	r20, 0x20	; 32
    1834:	51 e4       	ldi	r21, 0x41	; 65
    1836:	6d 81       	ldd	r22, Y+5	; 0x05
    1838:	7e 81       	ldd	r23, Y+6	; 0x06
    183a:	8f 81       	ldd	r24, Y+7	; 0x07
    183c:	98 85       	ldd	r25, Y+8	; 0x08
    183e:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9e 87       	std	Y+14, r25	; 0x0e
    1854:	8d 87       	std	Y+13, r24	; 0x0d
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <nokia_lcd_init+0x23e>
    1858:	89 e1       	ldi	r24, 0x19	; 25
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	98 8b       	std	Y+16, r25	; 0x10
    185e:	8f 87       	std	Y+15, r24	; 0x0f
    1860:	8f 85       	ldd	r24, Y+15	; 0x0f
    1862:	98 89       	ldd	r25, Y+16	; 0x10
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <nokia_lcd_init+0x22c>
    1868:	98 8b       	std	Y+16, r25	; 0x10
    186a:	8f 87       	std	Y+15, r24	; 0x0f
    186c:	8d 85       	ldd	r24, Y+13	; 0x0d
    186e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	9e 87       	std	Y+14, r25	; 0x0e
    1874:	8d 87       	std	Y+13, r24	; 0x0d
    1876:	8d 85       	ldd	r24, Y+13	; 0x0d
    1878:	9e 85       	ldd	r25, Y+14	; 0x0e
    187a:	89 2b       	or	r24, r25
    187c:	69 f7       	brne	.-38     	; 0x1858 <nokia_lcd_init+0x220>
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <nokia_lcd_init+0x270>
    1880:	69 85       	ldd	r22, Y+9	; 0x09
    1882:	7a 85       	ldd	r23, Y+10	; 0x0a
    1884:	8b 85       	ldd	r24, Y+11	; 0x0b
    1886:	9c 85       	ldd	r25, Y+12	; 0x0c
    1888:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9e 87       	std	Y+14, r25	; 0x0e
    1892:	8d 87       	std	Y+13, r24	; 0x0d
    1894:	8d 85       	ldd	r24, Y+13	; 0x0d
    1896:	9e 85       	ldd	r25, Y+14	; 0x0e
    1898:	9a 8b       	std	Y+18, r25	; 0x12
    189a:	89 8b       	std	Y+17, r24	; 0x11
    189c:	89 89       	ldd	r24, Y+17	; 0x11
    189e:	9a 89       	ldd	r25, Y+18	; 0x12
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <nokia_lcd_init+0x268>
    18a4:	9a 8b       	std	Y+18, r25	; 0x12
    18a6:	89 8b       	std	Y+17, r24	; 0x11
    18a8:	88 e2       	ldi	r24, 0x28	; 40
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	28 e2       	ldi	r18, 0x28	; 40
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	f9 01       	movw	r30, r18
    18b2:	20 81       	ld	r18, Z
    18b4:	24 60       	ori	r18, 0x04	; 4
    18b6:	fc 01       	movw	r30, r24
    18b8:	20 83       	st	Z, r18
    18ba:	88 e2       	ldi	r24, 0x28	; 40
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	28 e2       	ldi	r18, 0x28	; 40
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	f9 01       	movw	r30, r18
    18c4:	20 81       	ld	r18, Z
    18c6:	2d 7f       	andi	r18, 0xFD	; 253
    18c8:	fc 01       	movw	r30, r24
    18ca:	20 83       	st	Z, r18
    18cc:	81 e2       	ldi	r24, 0x21	; 33
    18ce:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
    18d2:	83 e1       	ldi	r24, 0x13	; 19
    18d4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
    18d8:	86 e0       	ldi	r24, 0x06	; 6
    18da:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
    18de:	82 ec       	ldi	r24, 0xC2	; 194
    18e0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
    18e4:	80 e2       	ldi	r24, 0x20	; 32
    18e6:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
    18ea:	89 e0       	ldi	r24, 0x09	; 9
    18ec:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
    18f0:	80 e8       	ldi	r24, 0x80	; 128
    18f2:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
    18f6:	80 e4       	ldi	r24, 0x40	; 64
    18f8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
    18fc:	00 e0       	ldi	r16, 0x00	; 0
    18fe:	10 e0       	ldi	r17, 0x00	; 0
    1900:	05 c0       	rjmp	.+10     	; 0x190c <nokia_lcd_init+0x2d4>
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	0e 94 0d 0b 	call	0x161a	; 0x161a <write_data>
    1908:	0f 5f       	subi	r16, 0xFF	; 255
    190a:	1f 4f       	sbci	r17, 0xFF	; 255
    190c:	08 3f       	cpi	r16, 0xF8	; 248
    190e:	f1 e0       	ldi	r31, 0x01	; 1
    1910:	1f 07       	cpc	r17, r31
    1912:	b8 f3       	brcs	.-18     	; 0x1902 <nokia_lcd_init+0x2ca>
    1914:	88 e0       	ldi	r24, 0x08	; 8
    1916:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
    191a:	8c e0       	ldi	r24, 0x0C	; 12
    191c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
    1920:	00 00       	nop
    1922:	6c 96       	adiw	r28, 0x1c	; 28
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	08 95       	ret

00001938 <nokia_lcd_clear>:
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	80 e8       	ldi	r24, 0x80	; 128
    1946:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
    194a:	80 e4       	ldi	r24, 0x40	; 64
    194c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
    1950:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <nokia_lcd+0x1f8>
    1954:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <nokia_lcd+0x1f9>
    1958:	00 e0       	ldi	r16, 0x00	; 0
    195a:	10 e0       	ldi	r17, 0x00	; 0
    195c:	07 c0       	rjmp	.+14     	; 0x196c <nokia_lcd_clear+0x34>
    195e:	c8 01       	movw	r24, r16
    1960:	8f 59       	subi	r24, 0x9F	; 159
    1962:	9e 4f       	sbci	r25, 0xFE	; 254
    1964:	fc 01       	movw	r30, r24
    1966:	10 82       	st	Z, r1
    1968:	0f 5f       	subi	r16, 0xFF	; 255
    196a:	1f 4f       	sbci	r17, 0xFF	; 255
    196c:	08 3f       	cpi	r16, 0xF8	; 248
    196e:	f1 e0       	ldi	r31, 0x01	; 1
    1970:	1f 07       	cpc	r17, r31
    1972:	a8 f3       	brcs	.-22     	; 0x195e <nokia_lcd_clear+0x26>
    1974:	00 00       	nop
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	08 95       	ret

00001980 <nokia_lcd_set_pixel>:

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	00 d0       	rcall	.+0      	; 0x1986 <nokia_lcd_set_pixel+0x6>
    1986:	00 d0       	rcall	.+0      	; 0x1988 <nokia_lcd_set_pixel+0x8>
    1988:	1f 92       	push	r1
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	6c 83       	std	Y+4, r22	; 0x04
    1992:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	86 95       	lsr	r24
    1998:	86 95       	lsr	r24
    199a:	86 95       	lsr	r24
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	44 e5       	ldi	r20, 0x54	; 84
    19a2:	48 9f       	mul	r20, r24
    19a4:	90 01       	movw	r18, r0
    19a6:	49 9f       	mul	r20, r25
    19a8:	30 0d       	add	r19, r0
    19aa:	11 24       	eor	r1, r1
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	82 0f       	add	r24, r18
    19b4:	93 1f       	adc	r25, r19
    19b6:	8f 59       	subi	r24, 0x9F	; 159
    19b8:	9e 4f       	sbci	r25, 0xFE	; 254
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
	if (value)
    19be:	8d 81       	ldd	r24, Y+5	; 0x05
    19c0:	88 23       	and	r24, r24
    19c2:	c9 f0       	breq	.+50     	; 0x19f6 <nokia_lcd_set_pixel+0x76>
		*byte |= (1 << (y % 8));
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	fc 01       	movw	r30, r24
    19ca:	80 81       	ld	r24, Z
    19cc:	48 2f       	mov	r20, r24
    19ce:	8c 81       	ldd	r24, Y+4	; 0x04
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9c 01       	movw	r18, r24
    19d6:	27 70       	andi	r18, 0x07	; 7
    19d8:	33 27       	eor	r19, r19
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <nokia_lcd_set_pixel+0x64>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	2a 95       	dec	r18
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <nokia_lcd_set_pixel+0x60>
    19e8:	84 2b       	or	r24, r20
    19ea:	28 2f       	mov	r18, r24
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	fc 01       	movw	r30, r24
    19f2:	20 83       	st	Z, r18
	else
		*byte &= ~(1 << (y %8 ));
}
    19f4:	19 c0       	rjmp	.+50     	; 0x1a28 <nokia_lcd_set_pixel+0xa8>
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
	if (value)
		*byte |= (1 << (y % 8));
	else
		*byte &= ~(1 << (y %8 ));
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	9a 81       	ldd	r25, Y+2	; 0x02
    19fa:	fc 01       	movw	r30, r24
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9c 01       	movw	r18, r24
    1a08:	27 70       	andi	r18, 0x07	; 7
    1a0a:	33 27       	eor	r19, r19
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <nokia_lcd_set_pixel+0x96>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	2a 95       	dec	r18
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <nokia_lcd_set_pixel+0x92>
    1a1a:	80 95       	com	r24
    1a1c:	84 23       	and	r24, r20
    1a1e:	28 2f       	mov	r18, r24
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	9a 81       	ldd	r25, Y+2	; 0x02
    1a24:	fc 01       	movw	r30, r24
    1a26:	20 83       	st	Z, r18
}
    1a28:	00 00       	nop
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <nokia_lcd_write_char>:

void nokia_lcd_write_char(char code, uint8_t scale)
{
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <nokia_lcd_write_char+0xa>
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <nokia_lcd_write_char+0xc>
    1a46:	1f 92       	push	r1
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	8c 83       	std	Y+4, r24	; 0x04
    1a4e:	6d 83       	std	Y+5, r22	; 0x05
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1a50:	10 e0       	ldi	r17, 0x00	; 0
    1a52:	65 c0       	rjmp	.+202    	; 0x1b1e <nokia_lcd_write_char+0xe4>
		for (y = 0; y < 7*scale; y++)
    1a54:	00 e0       	ldi	r16, 0x00	; 0
    1a56:	4e c0       	rjmp	.+156    	; 0x1af4 <nokia_lcd_write_char+0xba>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	88 2f       	mov	r24, r24
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9c 01       	movw	r18, r24
    1a60:	20 52       	subi	r18, 0x20	; 32
    1a62:	31 09       	sbc	r19, r1
    1a64:	9d 81       	ldd	r25, Y+5	; 0x05
    1a66:	81 2f       	mov	r24, r17
    1a68:	69 2f       	mov	r22, r25
    1a6a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__udivmodqi4>
    1a6e:	48 2f       	mov	r20, r24
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	c9 01       	movw	r24, r18
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	82 0f       	add	r24, r18
    1a7e:	93 1f       	adc	r25, r19
    1a80:	84 0f       	add	r24, r20
    1a82:	95 1f       	adc	r25, r21
    1a84:	88 59       	subi	r24, 0x98	; 152
    1a86:	9f 4f       	sbci	r25, 0xFF	; 255
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	fc 01       	movw	r30, r24
    1a92:	84 91       	lpm	r24, Z
    1a94:	8b 83       	std	Y+3, r24	; 0x03
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9e:	80 2f       	mov	r24, r16
    1aa0:	69 2f       	mov	r22, r25
    1aa2:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__udivmodqi4>
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a9 01       	movw	r20, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <nokia_lcd_write_char+0x78>
    1aae:	55 95       	asr	r21
    1ab0:	47 95       	ror	r20
    1ab2:	8a 95       	dec	r24
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <nokia_lcd_write_char+0x74>
    1ab6:	ca 01       	movw	r24, r20
    1ab8:	81 70       	andi	r24, 0x01	; 1
    1aba:	99 27       	eor	r25, r25
    1abc:	89 2b       	or	r24, r25
    1abe:	61 f0       	breq	.+24     	; 0x1ad8 <nokia_lcd_write_char+0x9e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    1ac0:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <nokia_lcd+0x1f9>
    1ac4:	98 2f       	mov	r25, r24
    1ac6:	90 0f       	add	r25, r16
    1ac8:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <nokia_lcd+0x1f8>
    1acc:	81 0f       	add	r24, r17
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	69 2f       	mov	r22, r25
    1ad2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <nokia_lcd_set_pixel>
    1ad6:	0b c0       	rjmp	.+22     	; 0x1aee <nokia_lcd_write_char+0xb4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1ad8:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <nokia_lcd+0x1f9>
    1adc:	98 2f       	mov	r25, r24
    1ade:	90 0f       	add	r25, r16
    1ae0:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <nokia_lcd+0x1f8>
    1ae4:	81 0f       	add	r24, r17
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	69 2f       	mov	r22, r25
    1aea:	0e 94 c0 0c 	call	0x1980	; 0x1980 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    1aee:	80 2f       	mov	r24, r16
    1af0:	01 e0       	ldi	r16, 0x01	; 1
    1af2:	08 0f       	add	r16, r24
    1af4:	40 2f       	mov	r20, r16
    1af6:	50 e0       	ldi	r21, 0x00	; 0
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	c9 01       	movw	r24, r18
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	82 1b       	sub	r24, r18
    1b0e:	93 0b       	sbc	r25, r19
    1b10:	48 17       	cp	r20, r24
    1b12:	59 07       	cpc	r21, r25
    1b14:	0c f4       	brge	.+2      	; 0x1b18 <nokia_lcd_write_char+0xde>
    1b16:	a0 cf       	rjmp	.-192    	; 0x1a58 <nokia_lcd_write_char+0x1e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1b18:	81 2f       	mov	r24, r17
    1b1a:	11 e0       	ldi	r17, 0x01	; 1
    1b1c:	18 0f       	add	r17, r24
    1b1e:	41 2f       	mov	r20, r17
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	c9 01       	movw	r24, r18
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	82 0f       	add	r24, r18
    1b34:	93 1f       	adc	r25, r19
    1b36:	48 17       	cp	r20, r24
    1b38:	59 07       	cpc	r21, r25
    1b3a:	0c f4       	brge	.+2      	; 0x1b3e <nokia_lcd_write_char+0x104>
    1b3c:	8b cf       	rjmp	.-234    	; 0x1a54 <nokia_lcd_write_char+0x1a>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1b3e:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <nokia_lcd+0x1f8>
    1b42:	9d 81       	ldd	r25, Y+5	; 0x05
    1b44:	89 2f       	mov	r24, r25
    1b46:	88 0f       	add	r24, r24
    1b48:	88 0f       	add	r24, r24
    1b4a:	89 0f       	add	r24, r25
    1b4c:	82 0f       	add	r24, r18
    1b4e:	8f 5f       	subi	r24, 0xFF	; 255
    1b50:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <nokia_lcd+0x1f8>
	if (nokia_lcd.cursor_x >= 84) {
    1b54:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <nokia_lcd+0x1f8>
    1b58:	84 35       	cpi	r24, 0x54	; 84
    1b5a:	70 f0       	brcs	.+28     	; 0x1b78 <nokia_lcd_write_char+0x13e>
		nokia_lcd.cursor_x = 0;
    1b5c:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    1b60:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <nokia_lcd+0x1f9>
    1b64:	9d 81       	ldd	r25, Y+5	; 0x05
    1b66:	89 2f       	mov	r24, r25
    1b68:	88 0f       	add	r24, r24
    1b6a:	88 0f       	add	r24, r24
    1b6c:	88 0f       	add	r24, r24
    1b6e:	89 1b       	sub	r24, r25
    1b70:	82 0f       	add	r24, r18
    1b72:	8f 5f       	subi	r24, 0xFF	; 255
    1b74:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <nokia_lcd+0x1f9>
	}
	if (nokia_lcd.cursor_y >= 48) {
    1b78:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <nokia_lcd+0x1f9>
    1b7c:	80 33       	cpi	r24, 0x30	; 48
    1b7e:	20 f0       	brcs	.+8      	; 0x1b88 <nokia_lcd_write_char+0x14e>
		nokia_lcd.cursor_x = 0;
    1b80:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    1b84:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <nokia_lcd+0x1f9>
	}
}
    1b88:	00 00       	nop
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	08 95       	ret

00001b9e <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <nokia_lcd_write_string+0x6>
    1ba4:	1f 92       	push	r1
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	9a 83       	std	Y+2, r25	; 0x02
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	6b 83       	std	Y+3, r22	; 0x03
	while(*str)
    1bb0:	0c c0       	rjmp	.+24     	; 0x1bca <nokia_lcd_write_string+0x2c>
		nokia_lcd_write_char(*str++, scale);
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb6:	9c 01       	movw	r18, r24
    1bb8:	2f 5f       	subi	r18, 0xFF	; 255
    1bba:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbc:	3a 83       	std	Y+2, r19	; 0x02
    1bbe:	29 83       	std	Y+1, r18	; 0x01
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	80 81       	ld	r24, Z
    1bc4:	6b 81       	ldd	r22, Y+3	; 0x03
    1bc6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	fc 01       	movw	r30, r24
    1bd0:	80 81       	ld	r24, Z
    1bd2:	88 23       	and	r24, r24
    1bd4:	71 f7       	brne	.-36     	; 0x1bb2 <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
}
    1bd6:	00 00       	nop
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <nokia_lcd_set_cursor+0x6>
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	6a 83       	std	Y+2, r22	; 0x02
	nokia_lcd.cursor_x = x;
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <nokia_lcd+0x1f9>
}
    1bfe:	00 00       	nop
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	08 95       	ret

00001c0a <nokia_lcd_render>:

void nokia_lcd_render(void)
{
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    1c16:	80 e8       	ldi	r24, 0x80	; 128
    1c18:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>
	write_cmd(0x40);
    1c1c:	80 e4       	ldi	r24, 0x40	; 64
    1c1e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1c22:	00 e0       	ldi	r16, 0x00	; 0
    1c24:	10 e0       	ldi	r17, 0x00	; 0
    1c26:	09 c0       	rjmp	.+18     	; 0x1c3a <nokia_lcd_render+0x30>
		write_data(nokia_lcd.screen[i]);
    1c28:	c8 01       	movw	r24, r16
    1c2a:	8f 59       	subi	r24, 0x9F	; 159
    1c2c:	9e 4f       	sbci	r25, 0xFE	; 254
    1c2e:	fc 01       	movw	r30, r24
    1c30:	80 81       	ld	r24, Z
    1c32:	0e 94 0d 0b 	call	0x161a	; 0x161a <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1c36:	0f 5f       	subi	r16, 0xFF	; 255
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	08 3f       	cpi	r16, 0xF8	; 248
    1c3c:	f1 e0       	ldi	r31, 0x01	; 1
    1c3e:	1f 07       	cpc	r17, r31
    1c40:	98 f3       	brcs	.-26     	; 0x1c28 <nokia_lcd_render+0x1e>
		write_data(nokia_lcd.screen[i]);
}
    1c42:	00 00       	nop
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	08 95       	ret

00001c4e <__cmpsf2>:
    1c4e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__fp_cmp>
    1c52:	08 f4       	brcc	.+2      	; 0x1c56 <__cmpsf2+0x8>
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	08 95       	ret

00001c58 <__divsf3>:
    1c58:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__divsf3x>
    1c5c:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_round>
    1c60:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__fp_pscB>
    1c64:	58 f0       	brcs	.+22     	; 0x1c7c <__divsf3+0x24>
    1c66:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__fp_pscA>
    1c6a:	40 f0       	brcs	.+16     	; 0x1c7c <__divsf3+0x24>
    1c6c:	29 f4       	brne	.+10     	; 0x1c78 <__divsf3+0x20>
    1c6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c70:	29 f0       	breq	.+10     	; 0x1c7c <__divsf3+0x24>
    1c72:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__fp_inf>
    1c76:	51 11       	cpse	r21, r1
    1c78:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__fp_szero>
    1c7c:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__fp_nan>

00001c80 <__divsf3x>:
    1c80:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__fp_split3>
    1c84:	68 f3       	brcs	.-38     	; 0x1c60 <__divsf3+0x8>

00001c86 <__divsf3_pse>:
    1c86:	99 23       	and	r25, r25
    1c88:	b1 f3       	breq	.-20     	; 0x1c76 <__divsf3+0x1e>
    1c8a:	55 23       	and	r21, r21
    1c8c:	91 f3       	breq	.-28     	; 0x1c72 <__divsf3+0x1a>
    1c8e:	95 1b       	sub	r25, r21
    1c90:	55 0b       	sbc	r21, r21
    1c92:	bb 27       	eor	r27, r27
    1c94:	aa 27       	eor	r26, r26
    1c96:	62 17       	cp	r22, r18
    1c98:	73 07       	cpc	r23, r19
    1c9a:	84 07       	cpc	r24, r20
    1c9c:	38 f0       	brcs	.+14     	; 0x1cac <__divsf3_pse+0x26>
    1c9e:	9f 5f       	subi	r25, 0xFF	; 255
    1ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca2:	22 0f       	add	r18, r18
    1ca4:	33 1f       	adc	r19, r19
    1ca6:	44 1f       	adc	r20, r20
    1ca8:	aa 1f       	adc	r26, r26
    1caa:	a9 f3       	breq	.-22     	; 0x1c96 <__divsf3_pse+0x10>
    1cac:	35 d0       	rcall	.+106    	; 0x1d18 <__divsf3_pse+0x92>
    1cae:	0e 2e       	mov	r0, r30
    1cb0:	3a f0       	brmi	.+14     	; 0x1cc0 <__divsf3_pse+0x3a>
    1cb2:	e0 e8       	ldi	r30, 0x80	; 128
    1cb4:	32 d0       	rcall	.+100    	; 0x1d1a <__divsf3_pse+0x94>
    1cb6:	91 50       	subi	r25, 0x01	; 1
    1cb8:	50 40       	sbci	r21, 0x00	; 0
    1cba:	e6 95       	lsr	r30
    1cbc:	00 1c       	adc	r0, r0
    1cbe:	ca f7       	brpl	.-14     	; 0x1cb2 <__divsf3_pse+0x2c>
    1cc0:	2b d0       	rcall	.+86     	; 0x1d18 <__divsf3_pse+0x92>
    1cc2:	fe 2f       	mov	r31, r30
    1cc4:	29 d0       	rcall	.+82     	; 0x1d18 <__divsf3_pse+0x92>
    1cc6:	66 0f       	add	r22, r22
    1cc8:	77 1f       	adc	r23, r23
    1cca:	88 1f       	adc	r24, r24
    1ccc:	bb 1f       	adc	r27, r27
    1cce:	26 17       	cp	r18, r22
    1cd0:	37 07       	cpc	r19, r23
    1cd2:	48 07       	cpc	r20, r24
    1cd4:	ab 07       	cpc	r26, r27
    1cd6:	b0 e8       	ldi	r27, 0x80	; 128
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <__divsf3_pse+0x56>
    1cda:	bb 0b       	sbc	r27, r27
    1cdc:	80 2d       	mov	r24, r0
    1cde:	bf 01       	movw	r22, r30
    1ce0:	ff 27       	eor	r31, r31
    1ce2:	93 58       	subi	r25, 0x83	; 131
    1ce4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce6:	3a f0       	brmi	.+14     	; 0x1cf6 <__divsf3_pse+0x70>
    1ce8:	9e 3f       	cpi	r25, 0xFE	; 254
    1cea:	51 05       	cpc	r21, r1
    1cec:	78 f0       	brcs	.+30     	; 0x1d0c <__divsf3_pse+0x86>
    1cee:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__fp_inf>
    1cf2:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__fp_szero>
    1cf6:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf8:	e4 f3       	brlt	.-8      	; 0x1cf2 <__divsf3_pse+0x6c>
    1cfa:	98 3e       	cpi	r25, 0xE8	; 232
    1cfc:	d4 f3       	brlt	.-12     	; 0x1cf2 <__divsf3_pse+0x6c>
    1cfe:	86 95       	lsr	r24
    1d00:	77 95       	ror	r23
    1d02:	67 95       	ror	r22
    1d04:	b7 95       	ror	r27
    1d06:	f7 95       	ror	r31
    1d08:	9f 5f       	subi	r25, 0xFF	; 255
    1d0a:	c9 f7       	brne	.-14     	; 0x1cfe <__divsf3_pse+0x78>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	91 1d       	adc	r25, r1
    1d10:	96 95       	lsr	r25
    1d12:	87 95       	ror	r24
    1d14:	97 f9       	bld	r25, 7
    1d16:	08 95       	ret
    1d18:	e1 e0       	ldi	r30, 0x01	; 1
    1d1a:	66 0f       	add	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	88 1f       	adc	r24, r24
    1d20:	bb 1f       	adc	r27, r27
    1d22:	62 17       	cp	r22, r18
    1d24:	73 07       	cpc	r23, r19
    1d26:	84 07       	cpc	r24, r20
    1d28:	ba 07       	cpc	r27, r26
    1d2a:	20 f0       	brcs	.+8      	; 0x1d34 <__divsf3_pse+0xae>
    1d2c:	62 1b       	sub	r22, r18
    1d2e:	73 0b       	sbc	r23, r19
    1d30:	84 0b       	sbc	r24, r20
    1d32:	ba 0b       	sbc	r27, r26
    1d34:	ee 1f       	adc	r30, r30
    1d36:	88 f7       	brcc	.-30     	; 0x1d1a <__divsf3_pse+0x94>
    1d38:	e0 95       	com	r30
    1d3a:	08 95       	ret

00001d3c <__fixunssfsi>:
    1d3c:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__fp_splitA>
    1d40:	88 f0       	brcs	.+34     	; 0x1d64 <__fixunssfsi+0x28>
    1d42:	9f 57       	subi	r25, 0x7F	; 127
    1d44:	98 f0       	brcs	.+38     	; 0x1d6c <__fixunssfsi+0x30>
    1d46:	b9 2f       	mov	r27, r25
    1d48:	99 27       	eor	r25, r25
    1d4a:	b7 51       	subi	r27, 0x17	; 23
    1d4c:	b0 f0       	brcs	.+44     	; 0x1d7a <__fixunssfsi+0x3e>
    1d4e:	e1 f0       	breq	.+56     	; 0x1d88 <__fixunssfsi+0x4c>
    1d50:	66 0f       	add	r22, r22
    1d52:	77 1f       	adc	r23, r23
    1d54:	88 1f       	adc	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	1a f0       	brmi	.+6      	; 0x1d60 <__fixunssfsi+0x24>
    1d5a:	ba 95       	dec	r27
    1d5c:	c9 f7       	brne	.-14     	; 0x1d50 <__fixunssfsi+0x14>
    1d5e:	14 c0       	rjmp	.+40     	; 0x1d88 <__fixunssfsi+0x4c>
    1d60:	b1 30       	cpi	r27, 0x01	; 1
    1d62:	91 f0       	breq	.+36     	; 0x1d88 <__fixunssfsi+0x4c>
    1d64:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__fp_zero>
    1d68:	b1 e0       	ldi	r27, 0x01	; 1
    1d6a:	08 95       	ret
    1d6c:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__fp_zero>
    1d70:	67 2f       	mov	r22, r23
    1d72:	78 2f       	mov	r23, r24
    1d74:	88 27       	eor	r24, r24
    1d76:	b8 5f       	subi	r27, 0xF8	; 248
    1d78:	39 f0       	breq	.+14     	; 0x1d88 <__fixunssfsi+0x4c>
    1d7a:	b9 3f       	cpi	r27, 0xF9	; 249
    1d7c:	cc f3       	brlt	.-14     	; 0x1d70 <__fixunssfsi+0x34>
    1d7e:	86 95       	lsr	r24
    1d80:	77 95       	ror	r23
    1d82:	67 95       	ror	r22
    1d84:	b3 95       	inc	r27
    1d86:	d9 f7       	brne	.-10     	; 0x1d7e <__fixunssfsi+0x42>
    1d88:	3e f4       	brtc	.+14     	; 0x1d98 <__fixunssfsi+0x5c>
    1d8a:	90 95       	com	r25
    1d8c:	80 95       	com	r24
    1d8e:	70 95       	com	r23
    1d90:	61 95       	neg	r22
    1d92:	7f 4f       	sbci	r23, 0xFF	; 255
    1d94:	8f 4f       	sbci	r24, 0xFF	; 255
    1d96:	9f 4f       	sbci	r25, 0xFF	; 255
    1d98:	08 95       	ret

00001d9a <__fp_cmp>:
    1d9a:	99 0f       	add	r25, r25
    1d9c:	00 08       	sbc	r0, r0
    1d9e:	55 0f       	add	r21, r21
    1da0:	aa 0b       	sbc	r26, r26
    1da2:	e0 e8       	ldi	r30, 0x80	; 128
    1da4:	fe ef       	ldi	r31, 0xFE	; 254
    1da6:	16 16       	cp	r1, r22
    1da8:	17 06       	cpc	r1, r23
    1daa:	e8 07       	cpc	r30, r24
    1dac:	f9 07       	cpc	r31, r25
    1dae:	c0 f0       	brcs	.+48     	; 0x1de0 <__fp_cmp+0x46>
    1db0:	12 16       	cp	r1, r18
    1db2:	13 06       	cpc	r1, r19
    1db4:	e4 07       	cpc	r30, r20
    1db6:	f5 07       	cpc	r31, r21
    1db8:	98 f0       	brcs	.+38     	; 0x1de0 <__fp_cmp+0x46>
    1dba:	62 1b       	sub	r22, r18
    1dbc:	73 0b       	sbc	r23, r19
    1dbe:	84 0b       	sbc	r24, r20
    1dc0:	95 0b       	sbc	r25, r21
    1dc2:	39 f4       	brne	.+14     	; 0x1dd2 <__fp_cmp+0x38>
    1dc4:	0a 26       	eor	r0, r26
    1dc6:	61 f0       	breq	.+24     	; 0x1de0 <__fp_cmp+0x46>
    1dc8:	23 2b       	or	r18, r19
    1dca:	24 2b       	or	r18, r20
    1dcc:	25 2b       	or	r18, r21
    1dce:	21 f4       	brne	.+8      	; 0x1dd8 <__fp_cmp+0x3e>
    1dd0:	08 95       	ret
    1dd2:	0a 26       	eor	r0, r26
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <__fp_cmp+0x3e>
    1dd6:	a1 40       	sbci	r26, 0x01	; 1
    1dd8:	a6 95       	lsr	r26
    1dda:	8f ef       	ldi	r24, 0xFF	; 255
    1ddc:	81 1d       	adc	r24, r1
    1dde:	81 1d       	adc	r24, r1
    1de0:	08 95       	ret

00001de2 <__fp_inf>:
    1de2:	97 f9       	bld	r25, 7
    1de4:	9f 67       	ori	r25, 0x7F	; 127
    1de6:	80 e8       	ldi	r24, 0x80	; 128
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	60 e0       	ldi	r22, 0x00	; 0
    1dec:	08 95       	ret

00001dee <__fp_nan>:
    1dee:	9f ef       	ldi	r25, 0xFF	; 255
    1df0:	80 ec       	ldi	r24, 0xC0	; 192
    1df2:	08 95       	ret

00001df4 <__fp_pscA>:
    1df4:	00 24       	eor	r0, r0
    1df6:	0a 94       	dec	r0
    1df8:	16 16       	cp	r1, r22
    1dfa:	17 06       	cpc	r1, r23
    1dfc:	18 06       	cpc	r1, r24
    1dfe:	09 06       	cpc	r0, r25
    1e00:	08 95       	ret

00001e02 <__fp_pscB>:
    1e02:	00 24       	eor	r0, r0
    1e04:	0a 94       	dec	r0
    1e06:	12 16       	cp	r1, r18
    1e08:	13 06       	cpc	r1, r19
    1e0a:	14 06       	cpc	r1, r20
    1e0c:	05 06       	cpc	r0, r21
    1e0e:	08 95       	ret

00001e10 <__fp_round>:
    1e10:	09 2e       	mov	r0, r25
    1e12:	03 94       	inc	r0
    1e14:	00 0c       	add	r0, r0
    1e16:	11 f4       	brne	.+4      	; 0x1e1c <__fp_round+0xc>
    1e18:	88 23       	and	r24, r24
    1e1a:	52 f0       	brmi	.+20     	; 0x1e30 <__fp_round+0x20>
    1e1c:	bb 0f       	add	r27, r27
    1e1e:	40 f4       	brcc	.+16     	; 0x1e30 <__fp_round+0x20>
    1e20:	bf 2b       	or	r27, r31
    1e22:	11 f4       	brne	.+4      	; 0x1e28 <__fp_round+0x18>
    1e24:	60 ff       	sbrs	r22, 0
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <__fp_round+0x20>
    1e28:	6f 5f       	subi	r22, 0xFF	; 255
    1e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e30:	08 95       	ret

00001e32 <__fp_split3>:
    1e32:	57 fd       	sbrc	r21, 7
    1e34:	90 58       	subi	r25, 0x80	; 128
    1e36:	44 0f       	add	r20, r20
    1e38:	55 1f       	adc	r21, r21
    1e3a:	59 f0       	breq	.+22     	; 0x1e52 <__fp_splitA+0x10>
    1e3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e3e:	71 f0       	breq	.+28     	; 0x1e5c <__fp_splitA+0x1a>
    1e40:	47 95       	ror	r20

00001e42 <__fp_splitA>:
    1e42:	88 0f       	add	r24, r24
    1e44:	97 fb       	bst	r25, 7
    1e46:	99 1f       	adc	r25, r25
    1e48:	61 f0       	breq	.+24     	; 0x1e62 <__fp_splitA+0x20>
    1e4a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e4c:	79 f0       	breq	.+30     	; 0x1e6c <__fp_splitA+0x2a>
    1e4e:	87 95       	ror	r24
    1e50:	08 95       	ret
    1e52:	12 16       	cp	r1, r18
    1e54:	13 06       	cpc	r1, r19
    1e56:	14 06       	cpc	r1, r20
    1e58:	55 1f       	adc	r21, r21
    1e5a:	f2 cf       	rjmp	.-28     	; 0x1e40 <__fp_split3+0xe>
    1e5c:	46 95       	lsr	r20
    1e5e:	f1 df       	rcall	.-30     	; 0x1e42 <__fp_splitA>
    1e60:	08 c0       	rjmp	.+16     	; 0x1e72 <__fp_splitA+0x30>
    1e62:	16 16       	cp	r1, r22
    1e64:	17 06       	cpc	r1, r23
    1e66:	18 06       	cpc	r1, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	f1 cf       	rjmp	.-30     	; 0x1e4e <__fp_splitA+0xc>
    1e6c:	86 95       	lsr	r24
    1e6e:	71 05       	cpc	r23, r1
    1e70:	61 05       	cpc	r22, r1
    1e72:	08 94       	sec
    1e74:	08 95       	ret

00001e76 <__fp_zero>:
    1e76:	e8 94       	clt

00001e78 <__fp_szero>:
    1e78:	bb 27       	eor	r27, r27
    1e7a:	66 27       	eor	r22, r22
    1e7c:	77 27       	eor	r23, r23
    1e7e:	cb 01       	movw	r24, r22
    1e80:	97 f9       	bld	r25, 7
    1e82:	08 95       	ret

00001e84 <__gesf2>:
    1e84:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__fp_cmp>
    1e88:	08 f4       	brcc	.+2      	; 0x1e8c <__gesf2+0x8>
    1e8a:	8f ef       	ldi	r24, 0xFF	; 255
    1e8c:	08 95       	ret

00001e8e <__mulsf3>:
    1e8e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__mulsf3x>
    1e92:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_round>
    1e96:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__fp_pscA>
    1e9a:	38 f0       	brcs	.+14     	; 0x1eaa <__mulsf3+0x1c>
    1e9c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__fp_pscB>
    1ea0:	20 f0       	brcs	.+8      	; 0x1eaa <__mulsf3+0x1c>
    1ea2:	95 23       	and	r25, r21
    1ea4:	11 f0       	breq	.+4      	; 0x1eaa <__mulsf3+0x1c>
    1ea6:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__fp_inf>
    1eaa:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__fp_nan>
    1eae:	11 24       	eor	r1, r1
    1eb0:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__fp_szero>

00001eb4 <__mulsf3x>:
    1eb4:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__fp_split3>
    1eb8:	70 f3       	brcs	.-36     	; 0x1e96 <__mulsf3+0x8>

00001eba <__mulsf3_pse>:
    1eba:	95 9f       	mul	r25, r21
    1ebc:	c1 f3       	breq	.-16     	; 0x1eae <__mulsf3+0x20>
    1ebe:	95 0f       	add	r25, r21
    1ec0:	50 e0       	ldi	r21, 0x00	; 0
    1ec2:	55 1f       	adc	r21, r21
    1ec4:	62 9f       	mul	r22, r18
    1ec6:	f0 01       	movw	r30, r0
    1ec8:	72 9f       	mul	r23, r18
    1eca:	bb 27       	eor	r27, r27
    1ecc:	f0 0d       	add	r31, r0
    1ece:	b1 1d       	adc	r27, r1
    1ed0:	63 9f       	mul	r22, r19
    1ed2:	aa 27       	eor	r26, r26
    1ed4:	f0 0d       	add	r31, r0
    1ed6:	b1 1d       	adc	r27, r1
    1ed8:	aa 1f       	adc	r26, r26
    1eda:	64 9f       	mul	r22, r20
    1edc:	66 27       	eor	r22, r22
    1ede:	b0 0d       	add	r27, r0
    1ee0:	a1 1d       	adc	r26, r1
    1ee2:	66 1f       	adc	r22, r22
    1ee4:	82 9f       	mul	r24, r18
    1ee6:	22 27       	eor	r18, r18
    1ee8:	b0 0d       	add	r27, r0
    1eea:	a1 1d       	adc	r26, r1
    1eec:	62 1f       	adc	r22, r18
    1eee:	73 9f       	mul	r23, r19
    1ef0:	b0 0d       	add	r27, r0
    1ef2:	a1 1d       	adc	r26, r1
    1ef4:	62 1f       	adc	r22, r18
    1ef6:	83 9f       	mul	r24, r19
    1ef8:	a0 0d       	add	r26, r0
    1efa:	61 1d       	adc	r22, r1
    1efc:	22 1f       	adc	r18, r18
    1efe:	74 9f       	mul	r23, r20
    1f00:	33 27       	eor	r19, r19
    1f02:	a0 0d       	add	r26, r0
    1f04:	61 1d       	adc	r22, r1
    1f06:	23 1f       	adc	r18, r19
    1f08:	84 9f       	mul	r24, r20
    1f0a:	60 0d       	add	r22, r0
    1f0c:	21 1d       	adc	r18, r1
    1f0e:	82 2f       	mov	r24, r18
    1f10:	76 2f       	mov	r23, r22
    1f12:	6a 2f       	mov	r22, r26
    1f14:	11 24       	eor	r1, r1
    1f16:	9f 57       	subi	r25, 0x7F	; 127
    1f18:	50 40       	sbci	r21, 0x00	; 0
    1f1a:	9a f0       	brmi	.+38     	; 0x1f42 <__mulsf3_pse+0x88>
    1f1c:	f1 f0       	breq	.+60     	; 0x1f5a <__mulsf3_pse+0xa0>
    1f1e:	88 23       	and	r24, r24
    1f20:	4a f0       	brmi	.+18     	; 0x1f34 <__mulsf3_pse+0x7a>
    1f22:	ee 0f       	add	r30, r30
    1f24:	ff 1f       	adc	r31, r31
    1f26:	bb 1f       	adc	r27, r27
    1f28:	66 1f       	adc	r22, r22
    1f2a:	77 1f       	adc	r23, r23
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	91 50       	subi	r25, 0x01	; 1
    1f30:	50 40       	sbci	r21, 0x00	; 0
    1f32:	a9 f7       	brne	.-22     	; 0x1f1e <__mulsf3_pse+0x64>
    1f34:	9e 3f       	cpi	r25, 0xFE	; 254
    1f36:	51 05       	cpc	r21, r1
    1f38:	80 f0       	brcs	.+32     	; 0x1f5a <__mulsf3_pse+0xa0>
    1f3a:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__fp_inf>
    1f3e:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__fp_szero>
    1f42:	5f 3f       	cpi	r21, 0xFF	; 255
    1f44:	e4 f3       	brlt	.-8      	; 0x1f3e <__mulsf3_pse+0x84>
    1f46:	98 3e       	cpi	r25, 0xE8	; 232
    1f48:	d4 f3       	brlt	.-12     	; 0x1f3e <__mulsf3_pse+0x84>
    1f4a:	86 95       	lsr	r24
    1f4c:	77 95       	ror	r23
    1f4e:	67 95       	ror	r22
    1f50:	b7 95       	ror	r27
    1f52:	f7 95       	ror	r31
    1f54:	e7 95       	ror	r30
    1f56:	9f 5f       	subi	r25, 0xFF	; 255
    1f58:	c1 f7       	brne	.-16     	; 0x1f4a <__mulsf3_pse+0x90>
    1f5a:	fe 2b       	or	r31, r30
    1f5c:	88 0f       	add	r24, r24
    1f5e:	91 1d       	adc	r25, r1
    1f60:	96 95       	lsr	r25
    1f62:	87 95       	ror	r24
    1f64:	97 f9       	bld	r25, 7
    1f66:	08 95       	ret

00001f68 <__udivmodqi4>:
    1f68:	99 1b       	sub	r25, r25
    1f6a:	79 e0       	ldi	r23, 0x09	; 9
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <__udivmodqi4_ep>

00001f6e <__udivmodqi4_loop>:
    1f6e:	99 1f       	adc	r25, r25
    1f70:	96 17       	cp	r25, r22
    1f72:	08 f0       	brcs	.+2      	; 0x1f76 <__udivmodqi4_ep>
    1f74:	96 1b       	sub	r25, r22

00001f76 <__udivmodqi4_ep>:
    1f76:	88 1f       	adc	r24, r24
    1f78:	7a 95       	dec	r23
    1f7a:	c9 f7       	brne	.-14     	; 0x1f6e <__udivmodqi4_loop>
    1f7c:	80 95       	com	r24
    1f7e:	08 95       	ret

00001f80 <__divmodsi4>:
    1f80:	05 2e       	mov	r0, r21
    1f82:	97 fb       	bst	r25, 7
    1f84:	1e f4       	brtc	.+6      	; 0x1f8c <__divmodsi4+0xc>
    1f86:	00 94       	com	r0
    1f88:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__negsi2>
    1f8c:	57 fd       	sbrc	r21, 7
    1f8e:	07 d0       	rcall	.+14     	; 0x1f9e <__divmodsi4_neg2>
    1f90:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__udivmodsi4>
    1f94:	07 fc       	sbrc	r0, 7
    1f96:	03 d0       	rcall	.+6      	; 0x1f9e <__divmodsi4_neg2>
    1f98:	4e f4       	brtc	.+18     	; 0x1fac <__divmodsi4_exit>
    1f9a:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__negsi2>

00001f9e <__divmodsi4_neg2>:
    1f9e:	50 95       	com	r21
    1fa0:	40 95       	com	r20
    1fa2:	30 95       	com	r19
    1fa4:	21 95       	neg	r18
    1fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa8:	4f 4f       	sbci	r20, 0xFF	; 255
    1faa:	5f 4f       	sbci	r21, 0xFF	; 255

00001fac <__divmodsi4_exit>:
    1fac:	08 95       	ret

00001fae <__negsi2>:
    1fae:	90 95       	com	r25
    1fb0:	80 95       	com	r24
    1fb2:	70 95       	com	r23
    1fb4:	61 95       	neg	r22
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fba:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbc:	08 95       	ret

00001fbe <__umulhisi3>:
    1fbe:	a2 9f       	mul	r26, r18
    1fc0:	b0 01       	movw	r22, r0
    1fc2:	b3 9f       	mul	r27, r19
    1fc4:	c0 01       	movw	r24, r0
    1fc6:	a3 9f       	mul	r26, r19
    1fc8:	70 0d       	add	r23, r0
    1fca:	81 1d       	adc	r24, r1
    1fcc:	11 24       	eor	r1, r1
    1fce:	91 1d       	adc	r25, r1
    1fd0:	b2 9f       	mul	r27, r18
    1fd2:	70 0d       	add	r23, r0
    1fd4:	81 1d       	adc	r24, r1
    1fd6:	11 24       	eor	r1, r1
    1fd8:	91 1d       	adc	r25, r1
    1fda:	08 95       	ret

00001fdc <__udivmodsi4>:
    1fdc:	a1 e2       	ldi	r26, 0x21	; 33
    1fde:	1a 2e       	mov	r1, r26
    1fe0:	aa 1b       	sub	r26, r26
    1fe2:	bb 1b       	sub	r27, r27
    1fe4:	fd 01       	movw	r30, r26
    1fe6:	0d c0       	rjmp	.+26     	; 0x2002 <__udivmodsi4_ep>

00001fe8 <__udivmodsi4_loop>:
    1fe8:	aa 1f       	adc	r26, r26
    1fea:	bb 1f       	adc	r27, r27
    1fec:	ee 1f       	adc	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	a2 17       	cp	r26, r18
    1ff2:	b3 07       	cpc	r27, r19
    1ff4:	e4 07       	cpc	r30, r20
    1ff6:	f5 07       	cpc	r31, r21
    1ff8:	20 f0       	brcs	.+8      	; 0x2002 <__udivmodsi4_ep>
    1ffa:	a2 1b       	sub	r26, r18
    1ffc:	b3 0b       	sbc	r27, r19
    1ffe:	e4 0b       	sbc	r30, r20
    2000:	f5 0b       	sbc	r31, r21

00002002 <__udivmodsi4_ep>:
    2002:	66 1f       	adc	r22, r22
    2004:	77 1f       	adc	r23, r23
    2006:	88 1f       	adc	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	1a 94       	dec	r1
    200c:	69 f7       	brne	.-38     	; 0x1fe8 <__udivmodsi4_loop>
    200e:	60 95       	com	r22
    2010:	70 95       	com	r23
    2012:	80 95       	com	r24
    2014:	90 95       	com	r25
    2016:	9b 01       	movw	r18, r22
    2018:	ac 01       	movw	r20, r24
    201a:	bd 01       	movw	r22, r26
    201c:	cf 01       	movw	r24, r30
    201e:	08 95       	ret

00002020 <sprintf>:
    2020:	ae e0       	ldi	r26, 0x0E	; 14
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e6 e1       	ldi	r30, 0x16	; 22
    2026:	f0 e1       	ldi	r31, 0x10	; 16
    2028:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__prologue_saves__+0x1c>
    202c:	0d 89       	ldd	r16, Y+21	; 0x15
    202e:	1e 89       	ldd	r17, Y+22	; 0x16
    2030:	86 e0       	ldi	r24, 0x06	; 6
    2032:	8c 83       	std	Y+4, r24	; 0x04
    2034:	1a 83       	std	Y+2, r17	; 0x02
    2036:	09 83       	std	Y+1, r16	; 0x01
    2038:	8f ef       	ldi	r24, 0xFF	; 255
    203a:	9f e7       	ldi	r25, 0x7F	; 127
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	ae 01       	movw	r20, r28
    2042:	47 5e       	subi	r20, 0xE7	; 231
    2044:	5f 4f       	sbci	r21, 0xFF	; 255
    2046:	6f 89       	ldd	r22, Y+23	; 0x17
    2048:	78 8d       	ldd	r23, Y+24	; 0x18
    204a:	ce 01       	movw	r24, r28
    204c:	01 96       	adiw	r24, 0x01	; 1
    204e:	0e 94 32 10 	call	0x2064	; 0x2064 <vfprintf>
    2052:	ef 81       	ldd	r30, Y+7	; 0x07
    2054:	f8 85       	ldd	r31, Y+8	; 0x08
    2056:	e0 0f       	add	r30, r16
    2058:	f1 1f       	adc	r31, r17
    205a:	10 82       	st	Z, r1
    205c:	2e 96       	adiw	r28, 0x0e	; 14
    205e:	e4 e0       	ldi	r30, 0x04	; 4
    2060:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__epilogue_restores__+0x1c>

00002064 <vfprintf>:
    2064:	ab e0       	ldi	r26, 0x0B	; 11
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e8 e3       	ldi	r30, 0x38	; 56
    206a:	f0 e1       	ldi	r31, 0x10	; 16
    206c:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__>
    2070:	6c 01       	movw	r12, r24
    2072:	7b 01       	movw	r14, r22
    2074:	8a 01       	movw	r16, r20
    2076:	fc 01       	movw	r30, r24
    2078:	17 82       	std	Z+7, r1	; 0x07
    207a:	16 82       	std	Z+6, r1	; 0x06
    207c:	83 81       	ldd	r24, Z+3	; 0x03
    207e:	81 ff       	sbrs	r24, 1
    2080:	cc c1       	rjmp	.+920    	; 0x241a <vfprintf+0x3b6>
    2082:	ce 01       	movw	r24, r28
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	3c 01       	movw	r6, r24
    2088:	f6 01       	movw	r30, r12
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	f7 01       	movw	r30, r14
    208e:	93 fd       	sbrc	r25, 3
    2090:	85 91       	lpm	r24, Z+
    2092:	93 ff       	sbrs	r25, 3
    2094:	81 91       	ld	r24, Z+
    2096:	7f 01       	movw	r14, r30
    2098:	88 23       	and	r24, r24
    209a:	09 f4       	brne	.+2      	; 0x209e <vfprintf+0x3a>
    209c:	ba c1       	rjmp	.+884    	; 0x2412 <vfprintf+0x3ae>
    209e:	85 32       	cpi	r24, 0x25	; 37
    20a0:	39 f4       	brne	.+14     	; 0x20b0 <vfprintf+0x4c>
    20a2:	93 fd       	sbrc	r25, 3
    20a4:	85 91       	lpm	r24, Z+
    20a6:	93 ff       	sbrs	r25, 3
    20a8:	81 91       	ld	r24, Z+
    20aa:	7f 01       	movw	r14, r30
    20ac:	85 32       	cpi	r24, 0x25	; 37
    20ae:	29 f4       	brne	.+10     	; 0x20ba <vfprintf+0x56>
    20b0:	b6 01       	movw	r22, r12
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	0e 94 29 12 	call	0x2452	; 0x2452 <fputc>
    20b8:	e7 cf       	rjmp	.-50     	; 0x2088 <vfprintf+0x24>
    20ba:	91 2c       	mov	r9, r1
    20bc:	21 2c       	mov	r2, r1
    20be:	31 2c       	mov	r3, r1
    20c0:	ff e1       	ldi	r31, 0x1F	; 31
    20c2:	f3 15       	cp	r31, r3
    20c4:	d8 f0       	brcs	.+54     	; 0x20fc <vfprintf+0x98>
    20c6:	8b 32       	cpi	r24, 0x2B	; 43
    20c8:	79 f0       	breq	.+30     	; 0x20e8 <vfprintf+0x84>
    20ca:	38 f4       	brcc	.+14     	; 0x20da <vfprintf+0x76>
    20cc:	80 32       	cpi	r24, 0x20	; 32
    20ce:	79 f0       	breq	.+30     	; 0x20ee <vfprintf+0x8a>
    20d0:	83 32       	cpi	r24, 0x23	; 35
    20d2:	a1 f4       	brne	.+40     	; 0x20fc <vfprintf+0x98>
    20d4:	23 2d       	mov	r18, r3
    20d6:	20 61       	ori	r18, 0x10	; 16
    20d8:	1d c0       	rjmp	.+58     	; 0x2114 <vfprintf+0xb0>
    20da:	8d 32       	cpi	r24, 0x2D	; 45
    20dc:	61 f0       	breq	.+24     	; 0x20f6 <vfprintf+0x92>
    20de:	80 33       	cpi	r24, 0x30	; 48
    20e0:	69 f4       	brne	.+26     	; 0x20fc <vfprintf+0x98>
    20e2:	23 2d       	mov	r18, r3
    20e4:	21 60       	ori	r18, 0x01	; 1
    20e6:	16 c0       	rjmp	.+44     	; 0x2114 <vfprintf+0xb0>
    20e8:	83 2d       	mov	r24, r3
    20ea:	82 60       	ori	r24, 0x02	; 2
    20ec:	38 2e       	mov	r3, r24
    20ee:	e3 2d       	mov	r30, r3
    20f0:	e4 60       	ori	r30, 0x04	; 4
    20f2:	3e 2e       	mov	r3, r30
    20f4:	2a c0       	rjmp	.+84     	; 0x214a <vfprintf+0xe6>
    20f6:	f3 2d       	mov	r31, r3
    20f8:	f8 60       	ori	r31, 0x08	; 8
    20fa:	1d c0       	rjmp	.+58     	; 0x2136 <vfprintf+0xd2>
    20fc:	37 fc       	sbrc	r3, 7
    20fe:	2d c0       	rjmp	.+90     	; 0x215a <vfprintf+0xf6>
    2100:	20 ed       	ldi	r18, 0xD0	; 208
    2102:	28 0f       	add	r18, r24
    2104:	2a 30       	cpi	r18, 0x0A	; 10
    2106:	40 f0       	brcs	.+16     	; 0x2118 <vfprintf+0xb4>
    2108:	8e 32       	cpi	r24, 0x2E	; 46
    210a:	b9 f4       	brne	.+46     	; 0x213a <vfprintf+0xd6>
    210c:	36 fc       	sbrc	r3, 6
    210e:	81 c1       	rjmp	.+770    	; 0x2412 <vfprintf+0x3ae>
    2110:	23 2d       	mov	r18, r3
    2112:	20 64       	ori	r18, 0x40	; 64
    2114:	32 2e       	mov	r3, r18
    2116:	19 c0       	rjmp	.+50     	; 0x214a <vfprintf+0xe6>
    2118:	36 fe       	sbrs	r3, 6
    211a:	06 c0       	rjmp	.+12     	; 0x2128 <vfprintf+0xc4>
    211c:	8a e0       	ldi	r24, 0x0A	; 10
    211e:	98 9e       	mul	r9, r24
    2120:	20 0d       	add	r18, r0
    2122:	11 24       	eor	r1, r1
    2124:	92 2e       	mov	r9, r18
    2126:	11 c0       	rjmp	.+34     	; 0x214a <vfprintf+0xe6>
    2128:	ea e0       	ldi	r30, 0x0A	; 10
    212a:	2e 9e       	mul	r2, r30
    212c:	20 0d       	add	r18, r0
    212e:	11 24       	eor	r1, r1
    2130:	22 2e       	mov	r2, r18
    2132:	f3 2d       	mov	r31, r3
    2134:	f0 62       	ori	r31, 0x20	; 32
    2136:	3f 2e       	mov	r3, r31
    2138:	08 c0       	rjmp	.+16     	; 0x214a <vfprintf+0xe6>
    213a:	8c 36       	cpi	r24, 0x6C	; 108
    213c:	21 f4       	brne	.+8      	; 0x2146 <vfprintf+0xe2>
    213e:	83 2d       	mov	r24, r3
    2140:	80 68       	ori	r24, 0x80	; 128
    2142:	38 2e       	mov	r3, r24
    2144:	02 c0       	rjmp	.+4      	; 0x214a <vfprintf+0xe6>
    2146:	88 36       	cpi	r24, 0x68	; 104
    2148:	41 f4       	brne	.+16     	; 0x215a <vfprintf+0xf6>
    214a:	f7 01       	movw	r30, r14
    214c:	93 fd       	sbrc	r25, 3
    214e:	85 91       	lpm	r24, Z+
    2150:	93 ff       	sbrs	r25, 3
    2152:	81 91       	ld	r24, Z+
    2154:	7f 01       	movw	r14, r30
    2156:	81 11       	cpse	r24, r1
    2158:	b3 cf       	rjmp	.-154    	; 0x20c0 <vfprintf+0x5c>
    215a:	98 2f       	mov	r25, r24
    215c:	9f 7d       	andi	r25, 0xDF	; 223
    215e:	95 54       	subi	r25, 0x45	; 69
    2160:	93 30       	cpi	r25, 0x03	; 3
    2162:	28 f4       	brcc	.+10     	; 0x216e <vfprintf+0x10a>
    2164:	0c 5f       	subi	r16, 0xFC	; 252
    2166:	1f 4f       	sbci	r17, 0xFF	; 255
    2168:	9f e3       	ldi	r25, 0x3F	; 63
    216a:	99 83       	std	Y+1, r25	; 0x01
    216c:	0d c0       	rjmp	.+26     	; 0x2188 <vfprintf+0x124>
    216e:	83 36       	cpi	r24, 0x63	; 99
    2170:	31 f0       	breq	.+12     	; 0x217e <vfprintf+0x11a>
    2172:	83 37       	cpi	r24, 0x73	; 115
    2174:	71 f0       	breq	.+28     	; 0x2192 <vfprintf+0x12e>
    2176:	83 35       	cpi	r24, 0x53	; 83
    2178:	09 f0       	breq	.+2      	; 0x217c <vfprintf+0x118>
    217a:	59 c0       	rjmp	.+178    	; 0x222e <vfprintf+0x1ca>
    217c:	21 c0       	rjmp	.+66     	; 0x21c0 <vfprintf+0x15c>
    217e:	f8 01       	movw	r30, r16
    2180:	80 81       	ld	r24, Z
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	0e 5f       	subi	r16, 0xFE	; 254
    2186:	1f 4f       	sbci	r17, 0xFF	; 255
    2188:	88 24       	eor	r8, r8
    218a:	83 94       	inc	r8
    218c:	91 2c       	mov	r9, r1
    218e:	53 01       	movw	r10, r6
    2190:	13 c0       	rjmp	.+38     	; 0x21b8 <vfprintf+0x154>
    2192:	28 01       	movw	r4, r16
    2194:	f2 e0       	ldi	r31, 0x02	; 2
    2196:	4f 0e       	add	r4, r31
    2198:	51 1c       	adc	r5, r1
    219a:	f8 01       	movw	r30, r16
    219c:	a0 80       	ld	r10, Z
    219e:	b1 80       	ldd	r11, Z+1	; 0x01
    21a0:	36 fe       	sbrs	r3, 6
    21a2:	03 c0       	rjmp	.+6      	; 0x21aa <vfprintf+0x146>
    21a4:	69 2d       	mov	r22, r9
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <vfprintf+0x14a>
    21aa:	6f ef       	ldi	r22, 0xFF	; 255
    21ac:	7f ef       	ldi	r23, 0xFF	; 255
    21ae:	c5 01       	movw	r24, r10
    21b0:	0e 94 1e 12 	call	0x243c	; 0x243c <strnlen>
    21b4:	4c 01       	movw	r8, r24
    21b6:	82 01       	movw	r16, r4
    21b8:	f3 2d       	mov	r31, r3
    21ba:	ff 77       	andi	r31, 0x7F	; 127
    21bc:	3f 2e       	mov	r3, r31
    21be:	16 c0       	rjmp	.+44     	; 0x21ec <vfprintf+0x188>
    21c0:	28 01       	movw	r4, r16
    21c2:	22 e0       	ldi	r18, 0x02	; 2
    21c4:	42 0e       	add	r4, r18
    21c6:	51 1c       	adc	r5, r1
    21c8:	f8 01       	movw	r30, r16
    21ca:	a0 80       	ld	r10, Z
    21cc:	b1 80       	ldd	r11, Z+1	; 0x01
    21ce:	36 fe       	sbrs	r3, 6
    21d0:	03 c0       	rjmp	.+6      	; 0x21d8 <vfprintf+0x174>
    21d2:	69 2d       	mov	r22, r9
    21d4:	70 e0       	ldi	r23, 0x00	; 0
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <vfprintf+0x178>
    21d8:	6f ef       	ldi	r22, 0xFF	; 255
    21da:	7f ef       	ldi	r23, 0xFF	; 255
    21dc:	c5 01       	movw	r24, r10
    21de:	0e 94 13 12 	call	0x2426	; 0x2426 <strnlen_P>
    21e2:	4c 01       	movw	r8, r24
    21e4:	f3 2d       	mov	r31, r3
    21e6:	f0 68       	ori	r31, 0x80	; 128
    21e8:	3f 2e       	mov	r3, r31
    21ea:	82 01       	movw	r16, r4
    21ec:	33 fc       	sbrc	r3, 3
    21ee:	1b c0       	rjmp	.+54     	; 0x2226 <vfprintf+0x1c2>
    21f0:	82 2d       	mov	r24, r2
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	88 16       	cp	r8, r24
    21f6:	99 06       	cpc	r9, r25
    21f8:	b0 f4       	brcc	.+44     	; 0x2226 <vfprintf+0x1c2>
    21fa:	b6 01       	movw	r22, r12
    21fc:	80 e2       	ldi	r24, 0x20	; 32
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	0e 94 29 12 	call	0x2452	; 0x2452 <fputc>
    2204:	2a 94       	dec	r2
    2206:	f4 cf       	rjmp	.-24     	; 0x21f0 <vfprintf+0x18c>
    2208:	f5 01       	movw	r30, r10
    220a:	37 fc       	sbrc	r3, 7
    220c:	85 91       	lpm	r24, Z+
    220e:	37 fe       	sbrs	r3, 7
    2210:	81 91       	ld	r24, Z+
    2212:	5f 01       	movw	r10, r30
    2214:	b6 01       	movw	r22, r12
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	0e 94 29 12 	call	0x2452	; 0x2452 <fputc>
    221c:	21 10       	cpse	r2, r1
    221e:	2a 94       	dec	r2
    2220:	21 e0       	ldi	r18, 0x01	; 1
    2222:	82 1a       	sub	r8, r18
    2224:	91 08       	sbc	r9, r1
    2226:	81 14       	cp	r8, r1
    2228:	91 04       	cpc	r9, r1
    222a:	71 f7       	brne	.-36     	; 0x2208 <vfprintf+0x1a4>
    222c:	e8 c0       	rjmp	.+464    	; 0x23fe <vfprintf+0x39a>
    222e:	84 36       	cpi	r24, 0x64	; 100
    2230:	11 f0       	breq	.+4      	; 0x2236 <vfprintf+0x1d2>
    2232:	89 36       	cpi	r24, 0x69	; 105
    2234:	41 f5       	brne	.+80     	; 0x2286 <vfprintf+0x222>
    2236:	f8 01       	movw	r30, r16
    2238:	37 fe       	sbrs	r3, 7
    223a:	07 c0       	rjmp	.+14     	; 0x224a <vfprintf+0x1e6>
    223c:	60 81       	ld	r22, Z
    223e:	71 81       	ldd	r23, Z+1	; 0x01
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	93 81       	ldd	r25, Z+3	; 0x03
    2244:	0c 5f       	subi	r16, 0xFC	; 252
    2246:	1f 4f       	sbci	r17, 0xFF	; 255
    2248:	08 c0       	rjmp	.+16     	; 0x225a <vfprintf+0x1f6>
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	07 2e       	mov	r0, r23
    2250:	00 0c       	add	r0, r0
    2252:	88 0b       	sbc	r24, r24
    2254:	99 0b       	sbc	r25, r25
    2256:	0e 5f       	subi	r16, 0xFE	; 254
    2258:	1f 4f       	sbci	r17, 0xFF	; 255
    225a:	f3 2d       	mov	r31, r3
    225c:	ff 76       	andi	r31, 0x6F	; 111
    225e:	3f 2e       	mov	r3, r31
    2260:	97 ff       	sbrs	r25, 7
    2262:	09 c0       	rjmp	.+18     	; 0x2276 <vfprintf+0x212>
    2264:	90 95       	com	r25
    2266:	80 95       	com	r24
    2268:	70 95       	com	r23
    226a:	61 95       	neg	r22
    226c:	7f 4f       	sbci	r23, 0xFF	; 255
    226e:	8f 4f       	sbci	r24, 0xFF	; 255
    2270:	9f 4f       	sbci	r25, 0xFF	; 255
    2272:	f0 68       	ori	r31, 0x80	; 128
    2274:	3f 2e       	mov	r3, r31
    2276:	2a e0       	ldi	r18, 0x0A	; 10
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	a3 01       	movw	r20, r6
    227c:	0e 94 65 12 	call	0x24ca	; 0x24ca <__ultoa_invert>
    2280:	88 2e       	mov	r8, r24
    2282:	86 18       	sub	r8, r6
    2284:	45 c0       	rjmp	.+138    	; 0x2310 <vfprintf+0x2ac>
    2286:	85 37       	cpi	r24, 0x75	; 117
    2288:	31 f4       	brne	.+12     	; 0x2296 <vfprintf+0x232>
    228a:	23 2d       	mov	r18, r3
    228c:	2f 7e       	andi	r18, 0xEF	; 239
    228e:	b2 2e       	mov	r11, r18
    2290:	2a e0       	ldi	r18, 0x0A	; 10
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	25 c0       	rjmp	.+74     	; 0x22e0 <vfprintf+0x27c>
    2296:	93 2d       	mov	r25, r3
    2298:	99 7f       	andi	r25, 0xF9	; 249
    229a:	b9 2e       	mov	r11, r25
    229c:	8f 36       	cpi	r24, 0x6F	; 111
    229e:	c1 f0       	breq	.+48     	; 0x22d0 <vfprintf+0x26c>
    22a0:	18 f4       	brcc	.+6      	; 0x22a8 <vfprintf+0x244>
    22a2:	88 35       	cpi	r24, 0x58	; 88
    22a4:	79 f0       	breq	.+30     	; 0x22c4 <vfprintf+0x260>
    22a6:	b5 c0       	rjmp	.+362    	; 0x2412 <vfprintf+0x3ae>
    22a8:	80 37       	cpi	r24, 0x70	; 112
    22aa:	19 f0       	breq	.+6      	; 0x22b2 <vfprintf+0x24e>
    22ac:	88 37       	cpi	r24, 0x78	; 120
    22ae:	21 f0       	breq	.+8      	; 0x22b8 <vfprintf+0x254>
    22b0:	b0 c0       	rjmp	.+352    	; 0x2412 <vfprintf+0x3ae>
    22b2:	e9 2f       	mov	r30, r25
    22b4:	e0 61       	ori	r30, 0x10	; 16
    22b6:	be 2e       	mov	r11, r30
    22b8:	b4 fe       	sbrs	r11, 4
    22ba:	0d c0       	rjmp	.+26     	; 0x22d6 <vfprintf+0x272>
    22bc:	fb 2d       	mov	r31, r11
    22be:	f4 60       	ori	r31, 0x04	; 4
    22c0:	bf 2e       	mov	r11, r31
    22c2:	09 c0       	rjmp	.+18     	; 0x22d6 <vfprintf+0x272>
    22c4:	34 fe       	sbrs	r3, 4
    22c6:	0a c0       	rjmp	.+20     	; 0x22dc <vfprintf+0x278>
    22c8:	29 2f       	mov	r18, r25
    22ca:	26 60       	ori	r18, 0x06	; 6
    22cc:	b2 2e       	mov	r11, r18
    22ce:	06 c0       	rjmp	.+12     	; 0x22dc <vfprintf+0x278>
    22d0:	28 e0       	ldi	r18, 0x08	; 8
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	05 c0       	rjmp	.+10     	; 0x22e0 <vfprintf+0x27c>
    22d6:	20 e1       	ldi	r18, 0x10	; 16
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <vfprintf+0x27c>
    22dc:	20 e1       	ldi	r18, 0x10	; 16
    22de:	32 e0       	ldi	r19, 0x02	; 2
    22e0:	f8 01       	movw	r30, r16
    22e2:	b7 fe       	sbrs	r11, 7
    22e4:	07 c0       	rjmp	.+14     	; 0x22f4 <vfprintf+0x290>
    22e6:	60 81       	ld	r22, Z
    22e8:	71 81       	ldd	r23, Z+1	; 0x01
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
    22ee:	0c 5f       	subi	r16, 0xFC	; 252
    22f0:	1f 4f       	sbci	r17, 0xFF	; 255
    22f2:	06 c0       	rjmp	.+12     	; 0x2300 <vfprintf+0x29c>
    22f4:	60 81       	ld	r22, Z
    22f6:	71 81       	ldd	r23, Z+1	; 0x01
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	0e 5f       	subi	r16, 0xFE	; 254
    22fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2300:	a3 01       	movw	r20, r6
    2302:	0e 94 65 12 	call	0x24ca	; 0x24ca <__ultoa_invert>
    2306:	88 2e       	mov	r8, r24
    2308:	86 18       	sub	r8, r6
    230a:	fb 2d       	mov	r31, r11
    230c:	ff 77       	andi	r31, 0x7F	; 127
    230e:	3f 2e       	mov	r3, r31
    2310:	36 fe       	sbrs	r3, 6
    2312:	0d c0       	rjmp	.+26     	; 0x232e <vfprintf+0x2ca>
    2314:	23 2d       	mov	r18, r3
    2316:	2e 7f       	andi	r18, 0xFE	; 254
    2318:	a2 2e       	mov	r10, r18
    231a:	89 14       	cp	r8, r9
    231c:	58 f4       	brcc	.+22     	; 0x2334 <vfprintf+0x2d0>
    231e:	34 fe       	sbrs	r3, 4
    2320:	0b c0       	rjmp	.+22     	; 0x2338 <vfprintf+0x2d4>
    2322:	32 fc       	sbrc	r3, 2
    2324:	09 c0       	rjmp	.+18     	; 0x2338 <vfprintf+0x2d4>
    2326:	83 2d       	mov	r24, r3
    2328:	8e 7e       	andi	r24, 0xEE	; 238
    232a:	a8 2e       	mov	r10, r24
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <vfprintf+0x2d4>
    232e:	b8 2c       	mov	r11, r8
    2330:	a3 2c       	mov	r10, r3
    2332:	03 c0       	rjmp	.+6      	; 0x233a <vfprintf+0x2d6>
    2334:	b8 2c       	mov	r11, r8
    2336:	01 c0       	rjmp	.+2      	; 0x233a <vfprintf+0x2d6>
    2338:	b9 2c       	mov	r11, r9
    233a:	a4 fe       	sbrs	r10, 4
    233c:	0f c0       	rjmp	.+30     	; 0x235c <vfprintf+0x2f8>
    233e:	fe 01       	movw	r30, r28
    2340:	e8 0d       	add	r30, r8
    2342:	f1 1d       	adc	r31, r1
    2344:	80 81       	ld	r24, Z
    2346:	80 33       	cpi	r24, 0x30	; 48
    2348:	21 f4       	brne	.+8      	; 0x2352 <vfprintf+0x2ee>
    234a:	9a 2d       	mov	r25, r10
    234c:	99 7e       	andi	r25, 0xE9	; 233
    234e:	a9 2e       	mov	r10, r25
    2350:	09 c0       	rjmp	.+18     	; 0x2364 <vfprintf+0x300>
    2352:	a2 fe       	sbrs	r10, 2
    2354:	06 c0       	rjmp	.+12     	; 0x2362 <vfprintf+0x2fe>
    2356:	b3 94       	inc	r11
    2358:	b3 94       	inc	r11
    235a:	04 c0       	rjmp	.+8      	; 0x2364 <vfprintf+0x300>
    235c:	8a 2d       	mov	r24, r10
    235e:	86 78       	andi	r24, 0x86	; 134
    2360:	09 f0       	breq	.+2      	; 0x2364 <vfprintf+0x300>
    2362:	b3 94       	inc	r11
    2364:	a3 fc       	sbrc	r10, 3
    2366:	11 c0       	rjmp	.+34     	; 0x238a <vfprintf+0x326>
    2368:	a0 fe       	sbrs	r10, 0
    236a:	06 c0       	rjmp	.+12     	; 0x2378 <vfprintf+0x314>
    236c:	b2 14       	cp	r11, r2
    236e:	88 f4       	brcc	.+34     	; 0x2392 <vfprintf+0x32e>
    2370:	28 0c       	add	r2, r8
    2372:	92 2c       	mov	r9, r2
    2374:	9b 18       	sub	r9, r11
    2376:	0e c0       	rjmp	.+28     	; 0x2394 <vfprintf+0x330>
    2378:	b2 14       	cp	r11, r2
    237a:	60 f4       	brcc	.+24     	; 0x2394 <vfprintf+0x330>
    237c:	b6 01       	movw	r22, r12
    237e:	80 e2       	ldi	r24, 0x20	; 32
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	0e 94 29 12 	call	0x2452	; 0x2452 <fputc>
    2386:	b3 94       	inc	r11
    2388:	f7 cf       	rjmp	.-18     	; 0x2378 <vfprintf+0x314>
    238a:	b2 14       	cp	r11, r2
    238c:	18 f4       	brcc	.+6      	; 0x2394 <vfprintf+0x330>
    238e:	2b 18       	sub	r2, r11
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <vfprintf+0x332>
    2392:	98 2c       	mov	r9, r8
    2394:	21 2c       	mov	r2, r1
    2396:	a4 fe       	sbrs	r10, 4
    2398:	10 c0       	rjmp	.+32     	; 0x23ba <vfprintf+0x356>
    239a:	b6 01       	movw	r22, r12
    239c:	80 e3       	ldi	r24, 0x30	; 48
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 29 12 	call	0x2452	; 0x2452 <fputc>
    23a4:	a2 fe       	sbrs	r10, 2
    23a6:	17 c0       	rjmp	.+46     	; 0x23d6 <vfprintf+0x372>
    23a8:	a1 fc       	sbrc	r10, 1
    23aa:	03 c0       	rjmp	.+6      	; 0x23b2 <vfprintf+0x34e>
    23ac:	88 e7       	ldi	r24, 0x78	; 120
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <vfprintf+0x352>
    23b2:	88 e5       	ldi	r24, 0x58	; 88
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	b6 01       	movw	r22, r12
    23b8:	0c c0       	rjmp	.+24     	; 0x23d2 <vfprintf+0x36e>
    23ba:	8a 2d       	mov	r24, r10
    23bc:	86 78       	andi	r24, 0x86	; 134
    23be:	59 f0       	breq	.+22     	; 0x23d6 <vfprintf+0x372>
    23c0:	a1 fe       	sbrs	r10, 1
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <vfprintf+0x364>
    23c4:	8b e2       	ldi	r24, 0x2B	; 43
    23c6:	01 c0       	rjmp	.+2      	; 0x23ca <vfprintf+0x366>
    23c8:	80 e2       	ldi	r24, 0x20	; 32
    23ca:	a7 fc       	sbrc	r10, 7
    23cc:	8d e2       	ldi	r24, 0x2D	; 45
    23ce:	b6 01       	movw	r22, r12
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0e 94 29 12 	call	0x2452	; 0x2452 <fputc>
    23d6:	89 14       	cp	r8, r9
    23d8:	38 f4       	brcc	.+14     	; 0x23e8 <vfprintf+0x384>
    23da:	b6 01       	movw	r22, r12
    23dc:	80 e3       	ldi	r24, 0x30	; 48
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	0e 94 29 12 	call	0x2452	; 0x2452 <fputc>
    23e4:	9a 94       	dec	r9
    23e6:	f7 cf       	rjmp	.-18     	; 0x23d6 <vfprintf+0x372>
    23e8:	8a 94       	dec	r8
    23ea:	f3 01       	movw	r30, r6
    23ec:	e8 0d       	add	r30, r8
    23ee:	f1 1d       	adc	r31, r1
    23f0:	80 81       	ld	r24, Z
    23f2:	b6 01       	movw	r22, r12
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0e 94 29 12 	call	0x2452	; 0x2452 <fputc>
    23fa:	81 10       	cpse	r8, r1
    23fc:	f5 cf       	rjmp	.-22     	; 0x23e8 <vfprintf+0x384>
    23fe:	22 20       	and	r2, r2
    2400:	09 f4       	brne	.+2      	; 0x2404 <vfprintf+0x3a0>
    2402:	42 ce       	rjmp	.-892    	; 0x2088 <vfprintf+0x24>
    2404:	b6 01       	movw	r22, r12
    2406:	80 e2       	ldi	r24, 0x20	; 32
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 29 12 	call	0x2452	; 0x2452 <fputc>
    240e:	2a 94       	dec	r2
    2410:	f6 cf       	rjmp	.-20     	; 0x23fe <vfprintf+0x39a>
    2412:	f6 01       	movw	r30, r12
    2414:	86 81       	ldd	r24, Z+6	; 0x06
    2416:	97 81       	ldd	r25, Z+7	; 0x07
    2418:	02 c0       	rjmp	.+4      	; 0x241e <vfprintf+0x3ba>
    241a:	8f ef       	ldi	r24, 0xFF	; 255
    241c:	9f ef       	ldi	r25, 0xFF	; 255
    241e:	2b 96       	adiw	r28, 0x0b	; 11
    2420:	e2 e1       	ldi	r30, 0x12	; 18
    2422:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__>

00002426 <strnlen_P>:
    2426:	fc 01       	movw	r30, r24
    2428:	05 90       	lpm	r0, Z+
    242a:	61 50       	subi	r22, 0x01	; 1
    242c:	70 40       	sbci	r23, 0x00	; 0
    242e:	01 10       	cpse	r0, r1
    2430:	d8 f7       	brcc	.-10     	; 0x2428 <strnlen_P+0x2>
    2432:	80 95       	com	r24
    2434:	90 95       	com	r25
    2436:	8e 0f       	add	r24, r30
    2438:	9f 1f       	adc	r25, r31
    243a:	08 95       	ret

0000243c <strnlen>:
    243c:	fc 01       	movw	r30, r24
    243e:	61 50       	subi	r22, 0x01	; 1
    2440:	70 40       	sbci	r23, 0x00	; 0
    2442:	01 90       	ld	r0, Z+
    2444:	01 10       	cpse	r0, r1
    2446:	d8 f7       	brcc	.-10     	; 0x243e <strnlen+0x2>
    2448:	80 95       	com	r24
    244a:	90 95       	com	r25
    244c:	8e 0f       	add	r24, r30
    244e:	9f 1f       	adc	r25, r31
    2450:	08 95       	ret

00002452 <fputc>:
    2452:	0f 93       	push	r16
    2454:	1f 93       	push	r17
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	fb 01       	movw	r30, r22
    245c:	23 81       	ldd	r18, Z+3	; 0x03
    245e:	21 fd       	sbrc	r18, 1
    2460:	03 c0       	rjmp	.+6      	; 0x2468 <fputc+0x16>
    2462:	8f ef       	ldi	r24, 0xFF	; 255
    2464:	9f ef       	ldi	r25, 0xFF	; 255
    2466:	2c c0       	rjmp	.+88     	; 0x24c0 <fputc+0x6e>
    2468:	22 ff       	sbrs	r18, 2
    246a:	16 c0       	rjmp	.+44     	; 0x2498 <fputc+0x46>
    246c:	46 81       	ldd	r20, Z+6	; 0x06
    246e:	57 81       	ldd	r21, Z+7	; 0x07
    2470:	24 81       	ldd	r18, Z+4	; 0x04
    2472:	35 81       	ldd	r19, Z+5	; 0x05
    2474:	42 17       	cp	r20, r18
    2476:	53 07       	cpc	r21, r19
    2478:	44 f4       	brge	.+16     	; 0x248a <fputc+0x38>
    247a:	a0 81       	ld	r26, Z
    247c:	b1 81       	ldd	r27, Z+1	; 0x01
    247e:	9d 01       	movw	r18, r26
    2480:	2f 5f       	subi	r18, 0xFF	; 255
    2482:	3f 4f       	sbci	r19, 0xFF	; 255
    2484:	31 83       	std	Z+1, r19	; 0x01
    2486:	20 83       	st	Z, r18
    2488:	8c 93       	st	X, r24
    248a:	26 81       	ldd	r18, Z+6	; 0x06
    248c:	37 81       	ldd	r19, Z+7	; 0x07
    248e:	2f 5f       	subi	r18, 0xFF	; 255
    2490:	3f 4f       	sbci	r19, 0xFF	; 255
    2492:	37 83       	std	Z+7, r19	; 0x07
    2494:	26 83       	std	Z+6, r18	; 0x06
    2496:	14 c0       	rjmp	.+40     	; 0x24c0 <fputc+0x6e>
    2498:	8b 01       	movw	r16, r22
    249a:	ec 01       	movw	r28, r24
    249c:	fb 01       	movw	r30, r22
    249e:	00 84       	ldd	r0, Z+8	; 0x08
    24a0:	f1 85       	ldd	r31, Z+9	; 0x09
    24a2:	e0 2d       	mov	r30, r0
    24a4:	09 95       	icall
    24a6:	89 2b       	or	r24, r25
    24a8:	e1 f6       	brne	.-72     	; 0x2462 <fputc+0x10>
    24aa:	d8 01       	movw	r26, r16
    24ac:	16 96       	adiw	r26, 0x06	; 6
    24ae:	8d 91       	ld	r24, X+
    24b0:	9c 91       	ld	r25, X
    24b2:	17 97       	sbiw	r26, 0x07	; 7
    24b4:	01 96       	adiw	r24, 0x01	; 1
    24b6:	17 96       	adiw	r26, 0x07	; 7
    24b8:	9c 93       	st	X, r25
    24ba:	8e 93       	st	-X, r24
    24bc:	16 97       	sbiw	r26, 0x06	; 6
    24be:	ce 01       	movw	r24, r28
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	08 95       	ret

000024ca <__ultoa_invert>:
    24ca:	fa 01       	movw	r30, r20
    24cc:	aa 27       	eor	r26, r26
    24ce:	28 30       	cpi	r18, 0x08	; 8
    24d0:	51 f1       	breq	.+84     	; 0x2526 <__ultoa_invert+0x5c>
    24d2:	20 31       	cpi	r18, 0x10	; 16
    24d4:	81 f1       	breq	.+96     	; 0x2536 <__ultoa_invert+0x6c>
    24d6:	e8 94       	clt
    24d8:	6f 93       	push	r22
    24da:	6e 7f       	andi	r22, 0xFE	; 254
    24dc:	6e 5f       	subi	r22, 0xFE	; 254
    24de:	7f 4f       	sbci	r23, 0xFF	; 255
    24e0:	8f 4f       	sbci	r24, 0xFF	; 255
    24e2:	9f 4f       	sbci	r25, 0xFF	; 255
    24e4:	af 4f       	sbci	r26, 0xFF	; 255
    24e6:	b1 e0       	ldi	r27, 0x01	; 1
    24e8:	3e d0       	rcall	.+124    	; 0x2566 <__ultoa_invert+0x9c>
    24ea:	b4 e0       	ldi	r27, 0x04	; 4
    24ec:	3c d0       	rcall	.+120    	; 0x2566 <__ultoa_invert+0x9c>
    24ee:	67 0f       	add	r22, r23
    24f0:	78 1f       	adc	r23, r24
    24f2:	89 1f       	adc	r24, r25
    24f4:	9a 1f       	adc	r25, r26
    24f6:	a1 1d       	adc	r26, r1
    24f8:	68 0f       	add	r22, r24
    24fa:	79 1f       	adc	r23, r25
    24fc:	8a 1f       	adc	r24, r26
    24fe:	91 1d       	adc	r25, r1
    2500:	a1 1d       	adc	r26, r1
    2502:	6a 0f       	add	r22, r26
    2504:	71 1d       	adc	r23, r1
    2506:	81 1d       	adc	r24, r1
    2508:	91 1d       	adc	r25, r1
    250a:	a1 1d       	adc	r26, r1
    250c:	20 d0       	rcall	.+64     	; 0x254e <__ultoa_invert+0x84>
    250e:	09 f4       	brne	.+2      	; 0x2512 <__ultoa_invert+0x48>
    2510:	68 94       	set
    2512:	3f 91       	pop	r19
    2514:	2a e0       	ldi	r18, 0x0A	; 10
    2516:	26 9f       	mul	r18, r22
    2518:	11 24       	eor	r1, r1
    251a:	30 19       	sub	r19, r0
    251c:	30 5d       	subi	r19, 0xD0	; 208
    251e:	31 93       	st	Z+, r19
    2520:	de f6       	brtc	.-74     	; 0x24d8 <__ultoa_invert+0xe>
    2522:	cf 01       	movw	r24, r30
    2524:	08 95       	ret
    2526:	46 2f       	mov	r20, r22
    2528:	47 70       	andi	r20, 0x07	; 7
    252a:	40 5d       	subi	r20, 0xD0	; 208
    252c:	41 93       	st	Z+, r20
    252e:	b3 e0       	ldi	r27, 0x03	; 3
    2530:	0f d0       	rcall	.+30     	; 0x2550 <__ultoa_invert+0x86>
    2532:	c9 f7       	brne	.-14     	; 0x2526 <__ultoa_invert+0x5c>
    2534:	f6 cf       	rjmp	.-20     	; 0x2522 <__ultoa_invert+0x58>
    2536:	46 2f       	mov	r20, r22
    2538:	4f 70       	andi	r20, 0x0F	; 15
    253a:	40 5d       	subi	r20, 0xD0	; 208
    253c:	4a 33       	cpi	r20, 0x3A	; 58
    253e:	18 f0       	brcs	.+6      	; 0x2546 <__ultoa_invert+0x7c>
    2540:	49 5d       	subi	r20, 0xD9	; 217
    2542:	31 fd       	sbrc	r19, 1
    2544:	40 52       	subi	r20, 0x20	; 32
    2546:	41 93       	st	Z+, r20
    2548:	02 d0       	rcall	.+4      	; 0x254e <__ultoa_invert+0x84>
    254a:	a9 f7       	brne	.-22     	; 0x2536 <__ultoa_invert+0x6c>
    254c:	ea cf       	rjmp	.-44     	; 0x2522 <__ultoa_invert+0x58>
    254e:	b4 e0       	ldi	r27, 0x04	; 4
    2550:	a6 95       	lsr	r26
    2552:	97 95       	ror	r25
    2554:	87 95       	ror	r24
    2556:	77 95       	ror	r23
    2558:	67 95       	ror	r22
    255a:	ba 95       	dec	r27
    255c:	c9 f7       	brne	.-14     	; 0x2550 <__ultoa_invert+0x86>
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	61 05       	cpc	r22, r1
    2562:	71 05       	cpc	r23, r1
    2564:	08 95       	ret
    2566:	9b 01       	movw	r18, r22
    2568:	ac 01       	movw	r20, r24
    256a:	0a 2e       	mov	r0, r26
    256c:	06 94       	lsr	r0
    256e:	57 95       	ror	r21
    2570:	47 95       	ror	r20
    2572:	37 95       	ror	r19
    2574:	27 95       	ror	r18
    2576:	ba 95       	dec	r27
    2578:	c9 f7       	brne	.-14     	; 0x256c <__ultoa_invert+0xa2>
    257a:	62 0f       	add	r22, r18
    257c:	73 1f       	adc	r23, r19
    257e:	84 1f       	adc	r24, r20
    2580:	95 1f       	adc	r25, r21
    2582:	a0 1d       	adc	r26, r0
    2584:	08 95       	ret

00002586 <__prologue_saves__>:
    2586:	2f 92       	push	r2
    2588:	3f 92       	push	r3
    258a:	4f 92       	push	r4
    258c:	5f 92       	push	r5
    258e:	6f 92       	push	r6
    2590:	7f 92       	push	r7
    2592:	8f 92       	push	r8
    2594:	9f 92       	push	r9
    2596:	af 92       	push	r10
    2598:	bf 92       	push	r11
    259a:	cf 92       	push	r12
    259c:	df 92       	push	r13
    259e:	ef 92       	push	r14
    25a0:	ff 92       	push	r15
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	ca 1b       	sub	r28, r26
    25b0:	db 0b       	sbc	r29, r27
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	f8 94       	cli
    25b6:	de bf       	out	0x3e, r29	; 62
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	cd bf       	out	0x3d, r28	; 61
    25bc:	09 94       	ijmp

000025be <__epilogue_restores__>:
    25be:	2a 88       	ldd	r2, Y+18	; 0x12
    25c0:	39 88       	ldd	r3, Y+17	; 0x11
    25c2:	48 88       	ldd	r4, Y+16	; 0x10
    25c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    25c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    25c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    25ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    25cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    25ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    25d0:	b9 84       	ldd	r11, Y+9	; 0x09
    25d2:	c8 84       	ldd	r12, Y+8	; 0x08
    25d4:	df 80       	ldd	r13, Y+7	; 0x07
    25d6:	ee 80       	ldd	r14, Y+6	; 0x06
    25d8:	fd 80       	ldd	r15, Y+5	; 0x05
    25da:	0c 81       	ldd	r16, Y+4	; 0x04
    25dc:	1b 81       	ldd	r17, Y+3	; 0x03
    25de:	aa 81       	ldd	r26, Y+2	; 0x02
    25e0:	b9 81       	ldd	r27, Y+1	; 0x01
    25e2:	ce 0f       	add	r28, r30
    25e4:	d1 1d       	adc	r29, r1
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	ed 01       	movw	r28, r26
    25f2:	08 95       	ret

000025f4 <_exit>:
    25f4:	f8 94       	cli

000025f6 <__stop_program>:
    25f6:	ff cf       	rjmp	.-2      	; 0x25f6 <__stop_program>
